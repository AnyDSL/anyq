
extern "C" {
	fn "rv_load" rv_load_i32(&[i32], i32) -> i32;
	fn "rv_load" rv_load_u32(&[u32], i32) -> u32;
	//fn "rv_load" rv_load_f32(&[f32], i32) -> f32;

	fn "rv_store" rv_store_i32(&[i32], i32, i32) -> ();
	fn "rv_store" rv_store_u32(&[u32], i32, u32) -> ();
	//fn "rv_store" rv_store_f32(&[f32], i32, f32) -> ();

    fn "rv_align" rv_align_i8(&[i8], i32)-> &[i8];


    fn "rv_insert" rv_insert_i32(i32, i32, i32) -> i32;
    fn "rv_insert" rv_insert_u32(u32, i32, u32) -> u32;
    //fn "rv_insert" rv_insert_f32(f32, i32, f32) -> f32;
}

fn main() -> i32 {
	atomics()
}


fn atomics() -> i32 {

	let warp_size = 8;
	// works for values atleast up to 128
	let vec_width = warp_size;

	let buffer = alloc_cpu((2*warp_size) as i64 *sizeof[i32]());
	let data = bitcast[&mut[i32]](rv_align_i8(buffer.data, vec_width));

	for i in range(0, warp_size) {
		data(i) = i;
	}

	// atomics
	let mut value = 10;
	let ptr = &mut value;

	// broken: constants are uniform resulting in a single atomic with the same constant
	fn atomic_add_i32_v0(self: i32, ptr: &mut i32, val: i32) -> i32 {
		atomic(1u, ptr, val, 7u, "")
	}

	// works: vec_width atomics
	fn atomic_add_i32_v1(self: i32, ptr: &mut i32, val: i32) -> i32 {
		let mut result:i32;

		for l in unroll(0, vec_width) {
			let lane_val = rv_extract_i32(val, l);
			let lane_res = atomic(1u, ptr, lane_val, 7u, "");
			if l == self { result = lane_res; }
		}

		result
	}

	// WORKS as intended
	fn atomic_add_i32_v1b(self: i32, ptr: &mut i32, val: i32) -> i32 {
		let mut result:i32 = self; // self is needed to make result varying

		for l in unroll(0, vec_width) {
			let lane_val = if rv_ballot(true) & (1 << l) != 0 { rv_extract_i32(val, l) } else { 0 };
			let lane_res = atomic(1u, ptr, lane_val, 7u, "");
			result = rv_insert_i32(result, l, lane_res);
		}

		result
	}

	// works: vec_width atomics
	let mut intermediate:[i32*8];

	fn atomic_add_i32_v2(self: i32, ptr: &mut i32, val: i32) -> i32 {
		let mut result:i32;
		//let ptr_result = &mut result;

		for l in unroll(0, vec_width) {
			let lane_val = rv_extract_i32(val, l);
			let lane_res = atomic(1u, ptr, lane_val, 7u, "");
			intermediate(l) = lane_res;
			//rv_store_i32(ptr_result, l, lane_res);
			result = rv_insert_i32(result, l, lane_res);
		}

		//for l in unroll(0, vec_width) {
		//	result = rv_insert_i32(result, l, intermediate(l));
		//}

		intermediate(self)
	}

	// works: vec_width atomics
	fn atomic_add_i32_v3(self: i32, ptr: &mut i32, val: i32) -> i32 {
		let mut result:i32;
		//let ptr_result = &mut result;

		for l in unroll(0, vec_width) {
			let lane_val = rv_extract_i32(val, l);
			let lane_res = atomic(1u, ptr, lane_val, 7u, "");
			//intermediate(l) = lane_res;
			//rv_store_i32(ptr_result, l, lane_res);
			if self == l {
				result = lane_res;
			}
		}

		result
	}

	// works: single atomic
	fn atomic_add_i32_v4(self: i32, ptr: &mut i32, val: i32) -> i32 {
		let mut aggregate = 0;
		let mut intermediate:[i32*8];

		for l in unroll(0, vec_width) {
			let lane_val = rv_extract_i32(val, l);
			intermediate(l) = aggregate;
			aggregate += lane_val;
		}

		let old = atomic(1u, ptr, aggregate, 7u, "");

		old + intermediate(self)
	}

	// works: single atomic
	fn atomic_add_i32_v5(self: i32, ptr: &mut i32, val: i32) -> i32 {
		let mut aggregate = 0;
		let mut intermediate:i32;

		for l in unroll(0, vec_width) {
			let lane_val = rv_extract_i32(val, l);
			if l == self { intermediate = aggregate; }
			aggregate += lane_val;
		}

		let old = atomic(1u, ptr, aggregate, 7u, "");

		old + intermediate
	}
	
	// works: single atomic
	fn atomic_add_i32_v6(self: i32, ptr: &mut i32, val: i32) -> i32 {
		let mut aggregate = 0;
		let mut intermediate:i32;
		let mut old:i32;

		for l in unroll(0, vec_width) {
			let lane_val = rv_extract_i32(val, l);
			if l == self { intermediate = aggregate; }
			aggregate += lane_val;
		}

		old = atomic(1u, ptr, aggregate, 7u, "");

		old + intermediate
	}

	fn atomic_add_i32_v7(self: i32, ptr: &mut i32, val: i32) -> i32 {
		let mut aggregate = 0;
		let mut intermediate:i32;
		let mut old:i32;

		for l in unroll(0, vec_width) {
			let lane_val = if rv_ballot(true) & (1 << l) != 0 { rv_extract_i32(val, l) } else { 0 };
			if l == self { intermediate = aggregate; }
			aggregate += lane_val;
		}

		old = atomic(1u, ptr, aggregate, 7u, "");

		old + intermediate
	}

	

	let atomic_add_i32 = atomic_add_i32_v7;



	fn @loop_body(lane: i32, vec_width: i32, read: fn(i32)->i32, write: fn(i32, i32)->(), global: fn(i32)->&mut i32) -> () {

		let mydata = read(lane);

		//let new_data = atomic_add_i32(lane, global(0), mydata);
		//let new_data = atomic_add_i32(lane, global(0), 1);
		let new_data = if mydata % 2 == 0 { atomic_add_i32(lane, global(0), 1) } else { -mydata };
		//let mut new_data;
		//if mydata % 2 == 0 {
		//	new_data = atomic_add_i32(lane, global(0), 1);
		//} else {
		//	new_data = mydata;
		//}

		write(lane, new_data);
	}


	let read = @|i:i32| data(i);
	let write = @|i:i32, val:i32| data(i) = val;
	let global = @|i:i32| ptr;

	for j in vectorize(vec_width) {
		loop_body(j, vec_width, read, write, global);
	}

	print_string("value: "); print_i32(value); print_char('\n');

	for i in range(0, warp_size) {
		print_i32(i); print_string(": "); print_i32(data(i)); print_string("\n");
	}

	release(buffer);

	0
}
