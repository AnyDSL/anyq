fn @setup_input(_num_globals: i32, _num_locals: i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let global = @|_g: i32| 0;
	let local  = @|_l: i32| 0xBEAF;
	(global, local)
}

fn @test_body(grid: gpu_grid_context, read: ReadFn, write: WriteFn, global: GlobalFn) -> () {
	for group in grid.groups() {
		let boff = (group.idx(0) * group.num_threads(0)) as i32;

		for thread in group.threads() {
			let lid = thread.idx(0) as i32;
			let tid = boff + lid;

			(*global(tid)) += 1;

			write(tid, lid);
		}

		for thread in group.threads() {
			let tid = boff + thread.idx(0) as i32;;

			(*global(tid)) += 1;

			let value = read(tid);

			write(tid, value + boff);
		}
	}
}

fn @expected_result(_global: fn(i32)->i32, _local: fn(i32)->i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let expected_global = |_g: i32| { 2 };
	let expected_local = |l: i32| { l };

	(expected_global, expected_local)
}
