struct QueueElement[T] {
	// [THREAD-SAFETY]: only functions that receive a gpu_thread_context (i.e. load/store) are thread-safe
	clear: fn() -> (),
	is_free: fn() -> bool,
	store: fn(fn() -> T, gpu_thread_context) -> (),
	load: fn(fn(T) -> (), gpu_thread_context) -> (),
	debug_print: fn(AccDevice) -> ()
}

struct QueueElementType[T] {
	buffer_size: fn(i32) -> i64,
	buffer_alignment: fn() -> i64,
	buffer_element: fn(&mut addrspace(1) [u8], u32) -> QueueElement[T]
}

struct ProducerConsumerQueue[T] {
	// [THREAD-SAFETY]: only functions that receive a gpu_thread_context (i.e. push/pop/size) are thread-safe
	push: fn(fn(u32) -> T) -> fn(gpu_thread_context) -> i32,
	pop: fn(fn(T, u32) -> ()) -> fn(gpu_thread_context) -> i32,
	// pop_wave: fn(gpu_wave_context, i32, fn(i32, u32) -> ()) -> i32,
	size: fn(gpu_thread_context) -> i32,
	reset: fn(gpu_grid_context) -> (),
	validate: fn(&mut addrspace(1) u32, gpu_grid_context) -> (),
	release: fn() -> ()
}

// note (cc < 7.0): threads within the same warp must only ever either enqueue or dequeue stuff concurrently
//                  this is fine as long as a warp only ever acts as either a producer or consumer at a time
fn @createConcurrentProducerConsumerQueue[T](device: AccDevice, element_type: QueueElementType[T], num_elements: i32) -> ProducerConsumerQueue[T] {
	let buffer_size = element_type.buffer_size(num_elements);
	let buffer_alignment = element_type.buffer_alignment();

	// TODO: size, head, tail are only i32 + 2x u32!
	let buffer_data_offset = round_up_i64(sizeof[i32]() + 3 * sizeof[u32](), buffer_alignment);

	let queue_device_state_alloc = device.alloc(buffer_data_offset + buffer_size);
	let queue_device_memory = bitcast[&mut addrspace(1) [u8]](queue_device_state_alloc.data);

	let size =   bitcast[&mut addrspace(1) i32](&mut queue_device_memory(0));
	let head =   bitcast[&mut addrspace(1) u32](&mut queue_device_memory(sizeof[i32]()));
	let tail =   bitcast[&mut addrspace(1) u32](&mut queue_device_memory(sizeof[i32]() + sizeof[u32]()));
	let buffer = bitcast[&mut addrspace(1) [u8]](&mut queue_device_memory(buffer_data_offset));

	let buffer_element = @|i:u32| -> QueueElement[T] { element_type.buffer_element(buffer, i) };

	ProducerConsumerQueue[T] {
		push = @|source:fn(u32)->T| @|thread:gpu_thread_context| -> i32 {
			let current_size1 = thread.atomic_load_global_i32(size, memory_order::relaxed);
			if current_size1 >= num_elements {
				0
			}
			else {
				let new_size = thread.atomic_add_global_i32(size, 1, memory_order::relaxed);
				for anyq_verbose() {
					device.print_3xi32("%d | QUEUE: reserve for push %d -> %d\n", thread.gid() as i32, current_size1, new_size);
				}

				if new_size >= num_elements {
					for anyq_verbose() {
						device.print_2xi32("%d | QUEUE: reject push %d\n", thread.gid() as i32, new_size);
					}
					thread.atomic_sub_global_i32(size, 1, memory_order::relaxed);
					0
				}
				else {
					let i = thread.atomic_inc_global_u32(tail, (num_elements - 1) as u32);
					for anyq_verbose() {
						device.print_2xi32("%d | QUEUE: move tail %d\n", thread.gid() as i32, i as i32);
					}

					buffer_element(i).store(@|| source(i), thread);

					1
				}
			}
		},

		pop = @|sink:fn(T, u32)->()| @|thread:gpu_thread_context| -> i32 {
			let current_size2 = thread.atomic_load_global_i32(size, memory_order::relaxed);
			if current_size2 <= 0 {
				0
			}
			else {
				let available = thread.atomic_sub_global_i32(size, 1, memory_order::relaxed);
				for anyq_verbose() {
					device.print_3xi32("%d | QUEUE: allocate for pop %d -> %d\n", thread.gid() as i32, current_size2, available);
				}

				if available <= 0 {
					for anyq_verbose() {
						device.print_2xi32("%d | QUEUE: reject pop %d\n", thread.gid() as i32, available);
					}
					thread.atomic_add_global_i32(size, 1, memory_order::relaxed);
					0
				}
				else {
					let i = thread.atomic_inc_global_u32(head, (num_elements - 1) as u32);
					for anyq_verbose() {
						device.print_2xi32("%d | QUEUE: move head %d\n", thread.gid() as i32, i as i32);
					}

					buffer_element(i).load(@|el:T| sink(el, i), thread);

					1
				}
			}
		},

		size = @|thread| {
			thread.atomic_load_global_i32(size, memory_order::relaxed)
		},

		reset = @|grid| {
			for thread in grid.threads() {
				let idx = thread.idx(0) as i32;

				if idx == 0 {
					thread.atomic_store_global_i32(size, 0, memory_order::relaxed);
					thread.atomic_store_global_u32(head, 0, memory_order::relaxed);
					thread.atomic_store_global_u32(tail, 0, memory_order::relaxed);
				}

				for i in range_step(idx, num_elements, grid.num_threads(0) as i32) {
					buffer_element(i as u32).clear();
				}
			}
		},

		validate = @|corrupted: &mut addrspace(1) u32, grid| {
			for thread in grid.threads() {
				let idx = thread.idx(0);

				if idx == 0 {
					if (*size != 0) {
						device.print_i32("VALIDATION ERROR: queue size (%d) is not zero!\n", *size);
						thread.atomic_store_global_u32(corrupted, 1, memory_order::relaxed);
					}
				}

				if idx < num_elements as u32 {
					let element = buffer_element(idx);
					if !element.is_free() {
						thread.atomic_store_global_u32(corrupted, 1, memory_order::relaxed);
						element.debug_print(device);
					}
				}
			}
		},

		release = @|| {
			release(queue_device_state_alloc);
		}
	}
}

type lock_type = u32;
struct QueueBufferElement[T] {
	lock: lock_type,
	data: T
}

fn @genericQueueElementType[T]() {

	let element_alignment = alignof[QueueBufferElement[T]]();
	let element_size = round_up_i64(sizeof[QueueBufferElement[T]](), element_alignment);

	QueueElementType[T] {
		buffer_size = @|num_elements| num_elements as i64 * element_size,
		buffer_alignment = @|| element_alignment,
		buffer_element = @|buffer, i| {

			let element_ptr = bitcast[&mut addrspace(1) [QueueBufferElement[T]]](buffer);
			let lock:&mut addrspace(1) lock_type = &mut (element_ptr(i).lock);
			let data:&mut addrspace(1) T = &mut (element_ptr(i).data);

			QueueElement[T] {
				clear = @|| *lock = 0,
				is_free = @|| *lock == 0,
				load = @|sink, thread| {
					while thread.atomic_cas_global_u32(lock, 2, 3, memory_order::acquire, memory_order::relaxed) != 2 {
						thread.yield("wait for element lock to read");
					}

					let payload:T = *data;
					sink(payload);

					thread.atomic_store_global_u32(lock, 0, memory_order::release);
				},
				store = @|source, thread| {
					while thread.atomic_cas_global_u32(lock, 0, 1, memory_order::acquire, memory_order::relaxed) != 0 {
						thread.yield("wait for element lock to write");
					}

					let payload:T = source();
					*data = payload;

					thread.atomic_store_global_u32(lock, 2, memory_order::release);
				},
				debug_print = @|device| {
					device.print_2xi32("VALIDATION ERROR: inconsistent queue state: buffer[%d] = %d\n", i as i32, *lock as i32);
				}
			}
		}
	}
}

fn @indexQueueElementType() = QueueElementType[u32] {
	buffer_size = @|num_elements| num_elements as i64 * sizeof[u32](),
	buffer_alignment = @|| alignof[u32](),
	buffer_element = @|buffer, i| {
		let element = &mut bitcast[&mut addrspace(1) [u32]](buffer)(i);
		let FREE: u32 = -1;

		QueueElement[u32] {
			clear = @|| *element = FREE,
			is_free = @|| *element == FREE,
			load = @|sink, thread| {
				let tryDequeue = @|| {
					let el = thread.atomic_exch_global_u32(element, FREE, memory_order::relaxed);
					if el != FREE {
						sink(el);
						true
					}
					else {
						false
					}
				};

				while !tryDequeue() {
					thread.yield("wait for a successful indexQueueElementType.load()");
				}
			},
			store = @|source, thread| {
				let value = source();
				while thread.atomic_cas_global_u32(element, FREE, value, memory_order::relaxed, memory_order::relaxed) != FREE {
					thread.yield("wait for a successful indexQueueElementType.store()");
				}
			},
			debug_print = @|device| {
				device.print_2xi32("VALIDATION ERROR: inconsistent queue state: buffer[%d] = %d\n", i as i32, *element as i32);
			}
		}
	}
};

fn @createConcurrentProducerConsumerIndexQueue(device: AccDevice, num_elements: i32) = createConcurrentProducerConsumerQueue[u32](device, indexQueueElementType(), num_elements);
fn @createConcurrentProducerConsumerQueueGeneric[T](device: AccDevice, num_elements: i32) = createConcurrentProducerConsumerQueue[T](device, genericQueueElementType[T](), num_elements);
