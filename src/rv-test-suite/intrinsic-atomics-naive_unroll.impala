// works: vec_width atomics
fn @atomic_add_i32(self: i32, vec_width: i32) -> fn(&mut i32, i32) -> i32 {
	|ptr, val| {
		let mut result:i32 = self; // self is needed to make result marked as varying

		for l in unroll(0, vec_width) {
			let lane_val = if rv_ballot(true) & (1 << l) != 0 { rv_extract_i32(val, l) } else { 0 };
			let lane_res = atomic[i32](1, ptr, lane_val, 7, "");
			result = rv_insert_i32(result, l, lane_res);
		}

		result
	}
}
