// works: single atomic
fn @atomic_add_i32(self: i32, vec_width: i32) -> fn(&mut i32, i32) -> i32 {
	|ptr, val| {
		let mut aggregate = 0;
		let mut intermediate:i32 = self; // self is needed to make result marked as varying
		let mut old:i32;

		for l in unroll(0, vec_width) {
			let lane_val = if rv_ballot(true) & (1 << l) != 0 { rv_extract_i32(val, l) } else { 0 };
			intermediate = rv_insert_i32(intermediate, l, aggregate);
			aggregate += lane_val;
		}

		old = atomic(1u, ptr, aggregate, 7u, "");

		old + intermediate
	}
}