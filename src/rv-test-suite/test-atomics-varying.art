
// reduction and a single atomic adding the aggregated value
// following an assembly of the resulting vector using base atomic value and constants

// inst_stats: llvm.vector.reduce.add.v8i32(1), atomicrmw(1), extractelement(7), insertelement(8)


fn @loop_body(lane: i32, vec_width: i32, read: fn(i32)->i32, write: fn(i32, i32)->(), global: fn(i32)->&mut i32) -> () {
	let mydata = read(lane);

	let atomic_add = atomic_add_i32(lane, vec_width);

	let new_data = atomic_add(global(0), mydata);

	write(lane, new_data);
}

fn expected_result(_data: fn(i32)->i32, _global: fn(i32)->&mut i32) -> (fn(i32)->i32, i32) {
	let values = [10, 10, 11, 13, 16, 20, 25, 31];
	let result = 38;

	(|i| values(i), result)
}
