
// inst_stats[x86_64]: llvm.vector.reduce.smin.v8i32(1), atomicrmw(1)


fn @setup_input(_num_globals: i32, _num_locals: i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let global = @|_: i32| 0x7fffffff;
	let local  = @|l: i32| l;
	(global, local)
}

fn @test_body(grid: grid_context, read: ReadFn, write: WriteFn, global: GlobalFn) -> () {
	for block in grid.groups() {
		for thread in block.threads() {
			let bidx = block.idx(0) as i32;
			let tidx = bidx * block.num_threads(0) as i32 + thread.idx(0) as i32;

			let mydata = read(tidx);

			thread.atomic_min_global_i32(global(bidx), mydata, memory_order::relaxed);

			write(tidx, mydata + 1);
		}
	}
}

fn @expected_result(_global: fn(i32)->i32, _local: fn(i32)->i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let values = |l: i32| l + 1;
	let result = |g: i32| match g { 0 => 0, 1 => 128, 2 => 256, 3 => 384, _ => 0x7fffffff };

	(result, values)
}
