
// inst_stats[x86_64]: atomicrmw(4), extractelement(8)


fn @setup_input(_num_globals: i32, _num_locals: i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let global = @|_: i32| 0;
	let local  = @|l: i32| l;
	(global, local)
}

fn @test_body(grid: grid_context, read: ReadFn, write: WriteFn, global: GlobalFn) -> () {
	for thread in grid.threads() {
		let mydata = read(thread.idx(0) as i32);

		let i = (mydata >> 7) & 0x3;
		let j = thread.idx(0) & 1;

		if j == 0 {
			thread.atomic_max_global_i32(global(i), mydata, memory_order::relaxed);
		}

		write(thread.idx(0) as i32, mydata + 1);
	}
}

fn @expected_result(_global: fn(i32)->i32, _local: fn(i32)->i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let values = |l: i32| l + 1;
	let result = |g: i32| match g { 0 => 0x7e, 1 => 0xfe, 2 => 0x017e, 3 => 0x01fe, _ => 0 };

	(result, values)
}
