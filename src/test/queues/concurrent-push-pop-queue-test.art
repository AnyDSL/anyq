
fn concurrent_push_pop_queue_test[T](num_threads: i32, block_dim: i32, attempts_per_thread: i32, queue_size: i32, create_queue: fn(AccDevice, i32) -> ProducerConsumerQueue[T], test_element: QueueTestElement[T]) -> i32 {
	let device = createDefaultAccDevice();

	let push_buffer_size = num_threads * attempts_per_thread;
	let queue_test = createQueueTest(device, create_queue, (push_buffer_size as i64 + 5) * sizeof[u32]());

	for queue, device_memory, device_failed_flag in queue_test.run_test(queue_size) {
		let push_buffer = device_memory as &mut addrspace(1) [i32];
		let num_pushed = &mut push_buffer(push_buffer_size + 0);
		let num_not_pushed = &mut push_buffer(push_buffer_size + 1);
		let num_popped = &mut push_buffer(push_buffer_size + 2);
		let num_not_popped = &mut push_buffer(push_buffer_size + 3);
		let push_buffer_sum = &mut push_buffer(push_buffer_size + 4);

		print_string("initialize debug push_buffer with "); print_i32(push_buffer_size); print_string(" elements ...\n");

		for grid in device.launch_1d(div_up(push_buffer_size + 5, block_dim), block_dim) {
			for thread in grid.threads() {
				if thread.idx(0) as i32 < push_buffer_size + 5 {
					push_buffer(thread.idx(0)) = 0;
				}
			}
		}

		device.synchronize();

		print_string("concurrent push and pop ...\n");

		fn @fail(i: i32, thread: gpu_thread_context) {
			thread.atomic_or_global_u32(device_failed_flag, 1 << i as u32, memory_order::relaxed);
		}

		let push = @|thread: gpu_thread_context, ref_value: i32| {
			if for _ in queue.push(thread) {
				thread.atomic_add_global_i32(push_buffer(ref_value), 1, memory_order::relaxed);

				for anyq_verbose() {
					device.print_2xi32("%d | PUSH - element %d\n", thread.gid() as i32, ref_value);
				}

				test_element.generateElement(ref_value)
			} > 0 {
				thread.atomic_add_global_i32(num_pushed, 1, memory_order::relaxed);
			}
			else {
				thread.atomic_add_global_i32(num_not_pushed, 1, memory_order::relaxed);
			}
		};

		let pop = @|thread: gpu_thread_context| {
			if for el, _ in queue.pop(thread) {
				let ref_value = test_element.unpackRefValue(el);

				for anyq_verbose() {
					device.print_2xi32("%d | POP  - element %d\n", thread.gid() as i32, ref_value);
				}

				if ref_value >= 0 && ref_value < push_buffer_size {
					let ref_count = thread.atomic_sub_global_i32(push_buffer(ref_value), 1, memory_order::relaxed);

					if ref_count != 1 {
						device.print_2xi32("ERROR: popped queue element %d was corrupted (got back ref count %d)!\n", ref_value, ref_count);
						fail(2, thread);
					}
				}
				else {
					device.print_i32("ERROR: popped queue element %d was corrupted (got back ref slot out of bounds)!\n", ref_value);
					fail(3, thread);
				}
			} > 0 {
				thread.atomic_add_global_i32(num_popped, 1, memory_order::relaxed);
			}
			else { 
				thread.atomic_add_global_i32(num_not_popped, 1, memory_order::relaxed);
			}
		};

		for grid in device.launch_1d(div_up(num_threads, block_dim), block_dim) {
			for wave in grid.waves() {
				for thread in grid.threads() {
					if thread.gid() as i32 < num_threads {

						let mut rand_state = rng::xorseed32(thread.gid());

						for n in range(0, attempts_per_thread) {

							rand_state = rng::xorshift32(rand_state);

							if rand_state as i32 < 0 {
								push(thread, thread.gid() as i32 * attempts_per_thread + n);
							}

							wave.barrier();  // make sure entire wave only ever pushes or pops in parallel

							if rand_state as i32 >= 0 {
								pop(thread);
							}

							wave.barrier();
						}
					}
				}
			}
		}

		device.synchronize();

		print_string("verify that queue size, push and pop counters, and push_buffer state are consistent ...\n");

		for grid in device.launch_1d(div_up(push_buffer_size, block_dim), block_dim) {
			for thread in grid.threads() {
				if thread.idx(0) as i32 < push_buffer_size {
					if push_buffer(thread.idx(0)) > 0 {
						thread.atomic_add_global_i32(push_buffer_sum, push_buffer(thread.idx(0)), memory_order::relaxed);
					}
				}
			}
		}

		device.synchronize();

		for grid in device.launch_1d(div_up(push_buffer_size, block_dim), block_dim) {
			for thread in grid.threads() {
				if thread.idx(0) == 0 {
					let size = queue.size(thread);
					let elements_left_reported = *num_pushed - *num_popped;

					if size != elements_left_reported {
						device.print_2xi32("ERROR: queue size (%d) is not consistent with number of elements reported pushed and not popped (%d)!\n", size, elements_left_reported);
						fail(4, thread);
					}

					if size != *push_buffer_sum {
						device.print_2xi32("ERROR: queue size (%d) is not consistent with number of source/sink invocations recorded in push_buffer (%d)!\n", size, *push_buffer_sum);
						fail(5, thread);
					}

					let num_attempts = num_threads * attempts_per_thread;
					let num_attempts_reported = *num_pushed + *num_popped + *num_not_pushed + *num_not_popped;

					if num_attempts_reported != num_attempts {
						device.print_2xi32("ERROR: number of successful and unsuccessful pushes/pops (%d) does not match number of attempts to push/pop (%d)!\n", num_attempts_reported, num_attempts);
						fail(6, thread);
					}
				}
			}
		}

		device.synchronize();

		print_string("pop remaining elements until empty ...\n");

		for grid in device.launch_1d(div_up(num_threads, block_dim), block_dim) {
			for thread in grid.threads() {
				if thread.idx(0) as i32 < num_threads {
					while (thread.atomic_load_global_i32(num_popped, memory_order::relaxed) < *num_pushed) {
						pop(thread);
					}
				}
			}
		}

		device.synchronize();

		print_string("check that all elements have been popped and queue size is consistent ...\n");

		for grid in device.launch_1d(div_up(push_buffer_size, block_dim), block_dim) {
			for thread in grid.threads() {
				if thread.idx(0) == 0 {
					let size = queue.size(thread);

					if size != 0 {
						device.print_i32("ERROR: queue size (%d) is not 0!\n", size);
						fail(8, thread);
					}
				}

				if thread.idx(0) as i32 < push_buffer_size {
					if push_buffer(thread.idx(0)) != 0 {
						device.print_2xi32("ERROR: push/pop count (%u) at slot %u is not zero!\n", push_buffer(thread.idx(0)), thread.idx(0) as i32);
						fail(9, thread);
					}
				}
			}
		}

		true
	}

	queue_test.finish()
}
