
#[export]
fn main() -> i32 {
	let device = createDefaultAccDevice();

	let group_size = 256;
	let num_groups = 42;

	let test = createBaseTest(device, 0);

	// verify that only all lanes trigger wave barrier_all
	for _, device_failed_flag in test.run_test() {
		for grid in device.launch_1d(num_groups, group_size) {
			for wave in grid.waves() {
				for thread in wave.threads() {
					for i in range(0, wave.num_threads() as i32) {

						if wave.barrier_all(thread.idx(0) == i as u32) != (wave.num_threads() == 1) {
							thread.atomic_or_global_u32(device_failed_flag, 1 << 0, memory_order::relaxed);
						}
					}

					if wave.barrier_all(true) != true {
						thread.atomic_or_global_u32(device_failed_flag, 1 << 1, memory_order::relaxed);
					}
				}
			}
		}

		true
	}

	// verify that any lane can trigger wave barrier_any
	for _, device_failed_flag in test.run_test() {
		for grid in device.launch_1d(num_groups, group_size) {
			for wave in grid.waves() {
				for thread in wave.threads() {
					for i in range(0, wave.num_threads() as i32) {

						if wave.barrier_any(thread.idx(0) == i as u32) != true {
							thread.atomic_or_global_u32(device_failed_flag, 1 << 2, memory_order::relaxed);
						}
					}

					if wave.barrier_any(false) != false {
						thread.atomic_or_global_u32(device_failed_flag, 1 << 3, memory_order::relaxed);
					}
				}
			}
		}

		true
	}

	// verify that every vote counts in wave barrier_vote
	for _, device_failed_flag in test.run_test() {
		for grid in device.launch_1d(num_groups, group_size) {
			for wave in grid.waves() {
				for thread in wave.threads() {
					// FIXME: nvcc / nvrtc generates incorrect code on Linux when range is used
					for i in unroll(0, wave.num_threads() as i32) {

						let expected = (1 << i as u64);

						if wave.barrier_vote(thread.idx(0) == i as u32) != expected {
							thread.atomic_or_global_u32(device_failed_flag, 1 << 4, memory_order::relaxed);
						}
					}

					if wave.barrier_vote(true) != wave.membermask() {
						thread.atomic_or_global_u32(device_failed_flag, 1 << 5, memory_order::relaxed);
					}
				}
			}
		}

		true
	}

	// verify that every lane counts in wave barrier_count
	for _, device_failed_flag in test.run_test() {
		for grid in device.launch_1d(num_groups, group_size) {
			for wave in grid.waves() {
				for thread in wave.threads() {
					for i in range(0, wave.num_threads() as i32) {

						if wave.barrier_count(thread.idx(0) == i as u32) != 1 {
							thread.atomic_or_global_u32(device_failed_flag, 1 << 6, memory_order::relaxed);
						}
					}

					if wave.barrier_count(true) as u32 != wave.num_threads() {
						thread.atomic_or_global_u32(device_failed_flag, 1 << 7, memory_order::relaxed);
					}
				}
			}
		}

		true
	}

	// verify that only all threads trigger group barrier_all
	for _, device_failed_flag in test.run_test() {
		for grid in device.launch_1d(num_groups, group_size) {
			for group in grid.groups() {
				for thread in group.threads() {
					for i in range(0, group.num_threads(0) as i32) {

						if group.barrier_all(thread.idx(0) == i as u32) != false {
							thread.atomic_or_global_u32(device_failed_flag, 1 << 8, memory_order::relaxed);
						}
					}

					if group.barrier_all(true) != true {
						thread.atomic_or_global_u32(device_failed_flag, 1 << 9, memory_order::relaxed);
					}
				}
			}
		}

		true
	}

	// verify that any threads can trigger group barrier_any
	for _, device_failed_flag in test.run_test() {
		for grid in device.launch_1d(num_groups, group_size) {
			for group in grid.groups() {
				for thread in group.threads() {
					for i in range(0, group.num_threads(0) as i32) {

						if group.barrier_any(thread.idx(0) == i as u32) != true {
							thread.atomic_or_global_u32(device_failed_flag, 1 << 10, memory_order::relaxed);
						}
					}

					if group.barrier_any(false) != false {
						thread.atomic_or_global_u32(device_failed_flag, 1 << 11, memory_order::relaxed);
					}
				}
			}
		}

		true
	}

	// verify that every thread counts in group barrier_count
	for _, device_failed_flag in test.run_test() {
		for grid in device.launch_1d(num_groups, group_size) {
			for group in grid.groups() {
				for thread in group.threads() {
					for i in range(0, group.num_threads(0) as i32) {

						if group.barrier_count(thread.idx(0) == i as u32) != 1 {
							thread.atomic_or_global_u32(device_failed_flag, 1 << 12, memory_order::relaxed);
						}
					}

					if group.barrier_count(true) as u32 != group.num_threads(0) {
						thread.atomic_or_global_u32(device_failed_flag, 1 << 13, memory_order::relaxed);
					}
				}
			}
		}

		true
	}

	test.finish()
}
