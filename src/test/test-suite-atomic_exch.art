
// inst_stats[x86_64]: llvm.vector.reduce.add.v8i32(2), atomicrmw(10), extractelement(16), insertelement(8)

// 1x atomicrmw add [ok]
// 8x extract mask for cascade
// 8x cascaded extract, atomicrmw xchg, insert [ok]
// 1x atomicrmw add [ok]

fn @setup_input(_num_globals: i32, _num_locals: i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let global = @|_: i32| 0;
	let local  = @|l: i32| l & 0xFFFFFE;
	(global, local)
}

fn @test_body(grid: gpu_grid_context, read: ReadFn, _write: WriteFn, global: GlobalFn) -> () {
	for thread in grid.threads() {
		let tidx = thread.idx(0) as i32;

		let mydata = read(tidx);
		thread.atomic_add_global_i32(global(0), mydata, memory_order::relaxed);

		let mut newdata = 0; // mydata;
		if mydata & 1 == 0 {
			newdata = thread.atomic_exch_global_i32(global(2), mydata, memory_order::relaxed);
		}

		thread.atomic_add_global_i32(global(1), newdata, memory_order::relaxed);
	}
}

fn @expected_result(global: fn(i32)->i32, _local: fn(i32)->i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let last_value = global(2);
	//print_string("last_value: "); print_i32(last_value); print_string("\n");

	let values = |l: i32| l & 0xFFFFFE;
//	let result = |g: i32| match g { 0 => 130816, 1 => 65280 - last_value, 2 => last_value, _ => 0x0 };
	let result = |g: i32| match g { 0 => 130560, 1 => 130560 - last_value, 2 => last_value, _ => 0x0 };

	(result, values)
}
