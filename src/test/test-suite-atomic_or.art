
// inst_stats[x86_64]: extractelement(16), atomicrmw(8)


fn @setup_input(_num_globals: i32, _num_locals: i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let global = @|_: i32| 0;
	let local  = @|l: i32| l;
	(global, local)
}

fn @test_body(grid: grid_context, read: ReadFn, _write: WriteFn, global: GlobalFn) -> () {
	for thread in grid.threads() {
		let mydata = read(thread.idx(0) as i32);

		let i = mydata >> 7;
		let j = mydata & 0x7f;

		thread.atomic_or_global_i32(global(i), j << (8*i), memory_order::relaxed);
	}
}

fn @expected_result(_global: fn(i32)->i32, _local: fn(i32)->i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let values = |l: i32| l;
	let result = |g: i32| match g { 0 => 0x0000007f, 1 => 0x00007f00, 2 => 0x007f0000, 3 => 0x7f000000, _ => 0x0 };

	(result, values)
}
