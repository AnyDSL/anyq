
// inst_stats: insertelement(1), shufflevector(1), llvm.x86.avx.movmsk.ps.256(1), llvm.masked.store.v8i32.p1v8i32(2)

// 1x voting using llvm.x86.avx.movmsk.ps.256 of icmp ne
// 1x broadcast of voting result followed by some shifting
// 2x masked stores according to diverging branches


// width must be the minimum warp_size of all platforms (currently CPU)
static width = 8;

fn @setup_input(_num_globals: i32, _num_locals: i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let global = @|_: i32| 0;
	let local  = @|l: i32| {
		let i = l % width;
		let c = ((l - i) & (1 << i)) != 0;
		if (l < 2*group_size) && c { 1 } else { 0 }
	};
	(global, local)
}

fn @test_body(grid: gpu_grid_context, read: ReadFn, write: WriteFn, global: GlobalFn) -> () {
	for wave in grid.waves() {

		if wave.idx() == 0 {
			*global(0) = wave.num_threads() as i32;
		}

		for thread in wave.threads() {
			let idx = (wave.idx() * wave.num_threads() + thread.idx(0)) as i32;

			let my_pred = read(idx) != 0;
			let wave_vote = wave.barrier_vote(my_pred);

			if thread.idx(0) % width as u32 == 0 {
				let my_wave_vote_part = ((wave_vote >> (thread.idx(0) as u64)) & ((1 << width) - 1) as u64) as i32;
				write(idx, my_wave_vote_part);
			} else {
				write(idx, -1);
			}
		}
	}
}

fn @expected_result(global: fn(i32)->i32, _local: fn(i32)->i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let wave_size = global(0);

	let values = |l: i32| {
		if (l < 2*group_size) {
			if l % width == 0 { l } else { -1 }
		} else {
			if l % width == 0 { 0 } else { -1 }
		}
	};
	let result = |g: i32| match g { 0 => wave_size, _ => 0};

	(result, values)
}
