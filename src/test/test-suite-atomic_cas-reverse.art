
// inst_stats[x86_64]: extractelement(32), cmpxchg(8), insertelement(9), shufflevector(1), llvm.x86.avx.movmsk.ps.256(1)

// vec_width: 3x extractelement (cmp, new, lane active), 1x cmpxchg, 1x insertelement
// 8x extractelement, 1x insertelement + 1x shufflevector for masked fiber_yield


fn @setup_input(_num_globals: i32, _num_locals: i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let global = @|_: i32| 511;
	let local  = @|l: i32| l;
	(global, local)
}

fn @test_body(grid: grid_context, read: ReadFn, write: WriteFn, global: GlobalFn) -> () {
	for thread in grid.threads() {
		let tidx = thread.idx(0) as i32;

		let mydata = read(tidx);
		let newdata = mydata - 1;

		//anyq_print_2xi32("process tidx: %d / assumed: %d\n", tidx, assumed);

		thread.wait(  // the fiber scheduler is not fair -> we need to yield if we wait for some other thread
			@|| thread.atomic_cas_global_i32(global(0), mydata, newdata, memory_order::relaxed, memory_order::relaxed).1,
			"wait for some other thread to cas first");

		//anyq_print_2xi32("finish  tidx: %d / assumed: %d\n", tidx, assumed);

		write(tidx, newdata);
	}
}

fn @expected_result(_global: fn(i32)->i32, _local: fn(i32)->i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let values = |l: i32| l - 1;
	let result = |g: i32| match g { 0 => -1, _ => 511 };

	(result, values)
}
