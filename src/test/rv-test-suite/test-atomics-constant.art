
// single atomic adding constant vec_width and reconstructing the result vector

// inst_stats[x86_64]: atomicrmw(1), insertelement(8)
// this is non-optimal and might be a regression

// optimal code:
//  - atomic add with constant = 8
//  - broadcast result with 1x insert and 1x shuffle
//  - add with constant vector [0, 1, 2, 3, 4, 5, 6, 7]


fn @loop_body(lane: i32, vec_width: i32, read: fn(i32)->i32, write: fn(i32, i32)->(), global: fn(i32)->&mut i32) -> () {
	let _mydata = read(lane);

	let atomic_add = atomic_add_i32(lane, vec_width);

	let new_data = atomic_add(global(0), 1);

	write(lane, new_data);
}

fn expected_result(_data: fn(i32)->i32, _global: fn(i32)->&mut i32) -> (fn(i32)->i32, i32) {
	let values = [10, 11, 12, 13, 14, 15, 16, 17];
	let result = 18;

	(|i| values(i), result)
}
