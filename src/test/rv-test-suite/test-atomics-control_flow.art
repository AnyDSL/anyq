
// cascade of atomic operations

// inst_stats: extractelement(8), atomicrmw(8), insertelement(8)


fn @loop_body(lane: i32, vec_width: i32, read: fn(i32)->i32, write: fn(i32, i32)->(), global: fn(i32)->&mut i32) -> () {
	let mydata = read(lane);

	let atomic_add = atomic_add_i32(lane, vec_width);

	let new_data = if mydata % 2 == 0 { atomic_add(global(0), 1) } else { -mydata };
	//let mut new_data:i32;
	//if mydata % 2 == 0 {
	//	new_data = atomic_add(global(0), 1);
	//} else {
	//	new_data = -mydata;
	//}

	write(lane, new_data);
}

fn expected_result(_data: fn(i32)->i32, _global: fn(i32)->&mut i32) -> (fn(i32)->i32, i32) {
	let values = [10, -1, 11, -3, 12, -5, 13, -7];
	let result = 14;

	(|i| values(i), result)
}
