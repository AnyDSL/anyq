#[import(cc = "C", name = "rv_load")]    fn rv_load_i32(&[i32], i32) -> i32;
#[import(cc = "C", name = "rv_store")]   fn rv_store_i32(&[i32], i32, i32) -> ();
#[import(cc = "C", name = "rv_align")]   fn rv_align_i8(&[i8], i32)-> &[i8];
#[import(cc = "C", name = "rv_insert")]  fn rv_insert_i32(i32, i32, i32) -> i32;
#[import(cc = "C", name = "rv_extract")] fn rv_extract_i32(i32, i32) -> i32;

#[export]
fn main() -> i32 {
	let warp_size = 8;
	// works for values atleast up to 128
	let vec_width = warp_size;

	let buffer = alloc_cpu((2*warp_size) as i64 *sizeof[i32]());
	let data = bitcast[&mut[i32]](rv_align_i8(buffer.data, vec_width));

	for i in range(0, warp_size) {
		data(i) = i;
	}

	// atomics
	let mut value = 10;
	let ptr = &mut value;

	let read = @|i:i32| data(i);
	let write = @|i:i32, val:i32| data(i) = val;
	let global = @|_i:i32| ptr;

	vectorize(vec_width, |j| loop_body(j, vec_width, read, write, global));

	let (expected_global, expected_local) = expected_result(read, global);
	let mut passed = true;

	print_string("value: "); print_i32(value); print_char('\n');
	passed &= (value == expected_local);

	for i in range(0, warp_size) {
		print_i32(i); print_string(": "); print_i32(data(i)); print_string("\n");
		let expected_value = expected_global;
		passed &= (expected_value(i) == data(i));
	}

	release(buffer);

	if passed { 0 } else { -1 }
}
