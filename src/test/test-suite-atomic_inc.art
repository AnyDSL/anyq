
// inst_stats[x86_64]: atomicrmw(1), llvm.vector.reduce.add.v8i32(1), extractelement(7), insertelement(14), shufflevector(3), cmpxchg(0), urem(1)

// improved RV codegen in [da19b25]: 1x atomicrmw, 1x llvm.vector.reduce.add.v8i32,
//                                   vec_width: 7x extract of active lanes, 8x insertelement to ressemble the vector
//                                   broadcasts: 2x insertelement + 3x shufflevector
//                                   wrap_around_value: 4x cascaded insertelement

// improved RV codegen in [f2ea517]: -4x cascaded extract & atomicrmw (PEed active lanes only), -4x broadcasts

// wrap_around_value: 4x cascaded insertelement, 1x shufflevector
// 6x various broadcasts (1x insertelement, 1x shufflevector)
// vec_width: 8x extract of active lanes, 8x cascade of atomicrmw + insertelement of result
// 1x urem

// reference: cmpxchg(4), extractelement(12), insertelement(14), shufflevector(6)
// vec_width/active lanes: 3x extractelement (old, new, active lane), 1x cmpxchg, 2x insertelement (old, success)
// 6x insertelement + 6x shufflevector for broadcasts


fn @setup_input(_num_globals: i32, _num_locals: i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let global = @|_: i32| 0;
	let local  = @|_: i32| 0xBEEF;
	(global, local)
}

fn @wrap_around_value(value: i32) -> u32 {
	match value {
		0 => 16, /* group_size / 8 */
		1 => 32, /* group_size / 4 */
		2 => 43, /* some prime number */
		_ => 96  /* 3/4 of group_size */
	}
}

fn @test_body(grid: gpu_grid_context, _read: ReadFn, write: WriteFn, global: GlobalFn) -> () {
	for block in grid.groups() {
		for thread in block.threads() {
			let bidx = block.idx(0) as i32;
			let ptr = bitcast[&mut addrspace(1)u32](global(bidx));

			// only every second thread increments the global counter
			if (thread.idx(0) & 1) == 0 {
				let newdata = thread.atomic_inc_global_u32(ptr, wrap_around_value(bidx) - 1) as i32;

				write(bidx * block.num_threads(0) as i32 + newdata, -(1 << bidx));
			}
		}
	}
}

fn @expected_result(global: fn(i32)->i32, _local: fn(i32)->i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let values = |l: i32| {
		/* group_size == 128 */
		let bidx = (l >> 7) & 0x3;
		let tidx = l & 0x7f;
		let wrap = wrap_around_value(bidx) as i32;
		if (tidx < wrap) && (tidx < (group_size / 2)) {
			-(1 << bidx)
		} else {
			0xBEEF
		}
	};

	// we can not make any assumptions on the global
	// hence, we just pass through their values
	let result = |g: i32| global(g);

	(result, values)
}
