
// inst_stats[x86_64]: llvm.vector.reduce.add.v8i32(1), atomicrmw(1)


fn @setup_input(_num_globals: i32, _num_locals: i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let global = @|_: i32| 0;
	let local  = @|l: i32| l;
	(global, local)
}

fn @test_body(grid: grid_context, read: ReadFn, _write: WriteFn, global: GlobalFn) -> () {
	for thread in grid.threads() {
		let mydata = read(thread.idx(0) as i32);
		thread.atomic_add_global_i32(global(0), mydata, memory_order::relaxed);
	}
}

fn @expected_result(_global: fn(i32)->i32, _local: fn(i32)->i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let values = |l: i32| l;
	let result = |g: i32| if g == 0 { 130816 } else { 0 };

	(result, values)
}
