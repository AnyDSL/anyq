fn @setup_input(_num_globals: i32, _num_locals: i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let global = @|_g: i32| 0;
	let local  = @|_l: i32| 0xBEAF;
	(global, local)
}

fn @test_body(grid: grid_context, _read: ReadFn, write: WriteFn, global: GlobalFn) -> () {
	for group in grid.groups() {
		// this code is executed by all threads within the group (hence group_size times)
		let bid = group.idx(0) as i32;

		atomic_inc(global(bid));
		write(bid, bid);
	}
}

fn @expected_result(_global: fn(i32)->i32, _local: fn(i32)->i32) -> (fn(i32)->i32, fn(i32)->i32) {
	let expected_global = |g: i32| { if g < num_groups { group_size } else { 0 } };
	let expected_local = |l: i32| { if l < num_groups { l } else { 0xBEAF } };

	(expected_global, expected_local)
}
