// AnyQ wrapper for reference implementation published with
// Bernhard Kerbl, Michael Kenzel, Joerg H. Mueller, Dieter Schmalstieg, Markus Steinberger, 2018, The Broker Queue: A Fast, Linearizable FIFO Queue for Fine-Granular Work Distribution on the GPU
// ICS '18: Proceedings of the 2018 International Conference on Supercomputing, pages 76â€“85
// https://doi.org/10.1145/3205289.3205291


#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000EE4initEv")] fn bq_init_1000() -> ();
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi10000EE4initEv")] fn bq_init_10000() -> ();
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi100000EE4initEv")] fn bq_init_100000() -> ();
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000000EE4initEv")] fn bq_init_1000000() -> ();
#[import(cc = "C", name = "bq_init_NA")] fn bq_init_NA() -> ();

#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000EE4pushEj")] fn bq_push_1000(u32) -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi10000EE4pushEj")] fn bq_push_10000(u32) -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi100000EE4pushEj")] fn bq_push_100000(u32) -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000000EE4pushEj")] fn bq_push_1000000(u32) -> i32;
#[import(cc = "C", name = "bq_push_NA")] fn bq_push_NA(u32) -> i32;

#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000EE3popEPj")] fn bq_pop_1000(&mut u32) -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi10000EE3popEPj")] fn bq_pop_10000(&mut u32) -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi100000EE3popEPj")] fn bq_pop_100000(&mut u32) -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000000EE3popEPj")] fn bq_pop_1000000(&mut u32) -> i32;
#[import(cc = "C", name = "bq_pop_NA")] fn bq_pop_NA(&mut u32) -> i32;

#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000EE4sizeEv")] fn bq_size_1000() -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi10000EE4sizeEv")] fn bq_size_10000() -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi100000EE4sizeEv")] fn bq_size_100000() -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000000EE4sizeEv")] fn bq_size_1000000() -> i32;
#[import(cc = "C", name = "bq_size_NA")] fn bq_size_NA() -> i32;


fn @createBrokerWorkDistributorQueueCUDA(_device: AccDevice, queue_size: i32) -> ProducerConsumerQueue[u32] {
	let bq_init = match (queue_size) {
		1000 => bq_init_1000,
		10000 => bq_init_10000,
		100000 => bq_init_100000,
		1000000 => bq_init_1000000,
		_ => bq_init_NA
	};

	let bq_push = match (queue_size) {
		1000 => bq_push_1000,
		10000 => bq_push_10000,
		100000 => bq_push_100000,
		1000000 => bq_push_1000000,
		_ => bq_push_NA
	};

	let bq_pop = match (queue_size) {
		1000 => bq_pop_1000,
		10000 => bq_pop_10000,
		100000 => bq_pop_100000,
		1000000 => bq_pop_1000000,
		_ => bq_pop_NA
	};

	let bq_size = match (queue_size) {
		1000 => bq_size_1000,
		10000 => bq_size_10000,
		100000 => bq_size_100000,
		1000000 => bq_size_1000000,
		_ => bq_size_NA
	};

	ProducerConsumerQueue[u32] {
		push = @|source:fn()->u32| @|_thread:gpu_thread_context| -> i32 {
			bq_push(source())
		},

		pop = @|sink:fn(u32)->()| @|_thread:gpu_thread_context| -> i32 {
			let mut el:u32;

			let res = bq_pop(&mut el);

			if res > 0 {
				sink(el);
			}

			res
		},

		size = @|_thread| bq_size(),

		reset = @|grid| {
			for _thread in grid.threads() {
				bq_init();
			}
		},

		validate = @|_corrupted: &mut addrspace(1) u32, _grid| {
		},

		release = @|| {
		}
	}
}
