// AnyQ wrapper for reference implementation published with
// Bernhard Kerbl, Michael Kenzel, Joerg H. Mueller, Dieter Schmalstieg and Markus Steinberger. 2018. The Broker Queue: A Fast, Linearizable FIFO Queue for Fine-Granular Work Distribution on the GPU.
// In Proceedings of the 2018 International Conference on Supercomputing (ICS '18), pages 76â€“85
// https://doi.org/10.1145/3205289.3205291


#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1024EE4initEPv")] fn bq_init_1024(&mut addrspace(1) [u8]) -> ();
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi16384EE4initEPv")] fn bq_init_16384(&mut addrspace(1) [u8]) -> ();
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi131072EE4initEPv")] fn bq_init_131072(&mut addrspace(1) [u8]) -> ();
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1048576EE4initEPv")] fn bq_init_1048576(&mut addrspace(1) [u8]) -> ();
#[import(cc = "C", name = "bq_init_NA")] fn bq_init_NA(&mut addrspace(1) [u8]) -> ();

#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1024EE14ensure_enqueueEPv")] fn bq_ensure_enqueue_1024(&mut addrspace(1) [u8]) -> bool;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi16384EE14ensure_enqueueEPv")] fn bq_ensure_enqueue_16384(&mut addrspace(1) [u8]) -> bool;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi131072EE14ensure_enqueueEPv")] fn bq_ensure_enqueue_131072(&mut addrspace(1) [u8]) -> bool;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1048576EE14ensure_enqueueEPv")] fn bq_ensure_enqueue_1048576(&mut addrspace(1) [u8]) -> bool;
#[import(cc = "C", name = "bq_ensure_enqueue_NA")] fn bq_ensure_enqueue_NA(&mut addrspace(1) [u8]) -> bool;

#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1024EE8put_dataEPvj")] fn bq_put_data_1024(&mut addrspace(1) [u8], u32) -> ();
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi16384EE8put_dataEPvj")] fn bq_put_data_16384(&mut addrspace(1) [u8], u32) -> ();
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi131072EE8put_dataEPvj")] fn bq_put_data_131072(&mut addrspace(1) [u8], u32) -> ();
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1048576EE8put_dataEPvj")] fn bq_put_data_1048576(&mut addrspace(1) [u8], u32) -> ();
#[import(cc = "C", name = "bq_put_data_NA")] fn bq_put_data_NA(&mut addrspace(1) [u8], u32) -> ();

#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1024EE14ensure_dequeueEPv")] fn bq_ensure_dequeue_1024(&mut addrspace(1) [u8]) -> bool;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi16384EE14ensure_dequeueEPv")] fn bq_ensure_dequeue_16384(&mut addrspace(1) [u8]) -> bool;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi131072EE14ensure_dequeueEPv")] fn bq_ensure_dequeue_131072(&mut addrspace(1) [u8]) -> bool;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1048576EE14ensure_dequeueEPv")] fn bq_ensure_dequeue_1048576(&mut addrspace(1) [u8]) -> bool;
#[import(cc = "C", name = "bq_ensure_dequeue_NA")] fn bq_ensure_dequeue_NA(&mut addrspace(1) [u8]) -> bool;

#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1024EE9read_dataEPv")] fn bq_read_data_1024(&mut addrspace(1) [u8]) -> u32;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi16384EE9read_dataEPv")] fn bq_read_data_16384(&mut addrspace(1) [u8]) -> u32;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi131072EE9read_dataEPv")] fn bq_read_data_131072(&mut addrspace(1) [u8]) -> u32;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1048576EE9read_dataEPv")] fn bq_read_data_1048576(&mut addrspace(1) [u8]) -> u32;
#[import(cc = "C", name = "bq_read_data_NA")] fn bq_read_data_NA(&mut addrspace(1) [u8]) -> u32;

#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1024EE4sizeEPv")] fn bq_size_1024(&mut addrspace(1) [u8]) -> i32;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi16384EE4sizeEPv")] fn bq_size_16384(&mut addrspace(1) [u8]) -> i32;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi131072EE4sizeEPv")] fn bq_size_131072(&mut addrspace(1) [u8]) -> i32;
#[import(cc = "C", name = "_ZN21BWDIndexQueueIndirectILi1048576EE4sizeEPv")] fn bq_size_1048576(&mut addrspace(1) [u8]) -> i32;
#[import(cc = "C", name = "bq_size_NA")] fn bq_size_NA(&mut addrspace(1) [u8]) -> i32;


fn @createBrokerWorkDistributorQueueCUDAIndirect(_device: AccDevice, queue_size: i32) -> create_queue_result[u32] {
	if queue_size < 0 {
		return(create_queue_result[T]::Err("invalid queue size"))
	}

	if queue_size != 1024 && queue_size != 16384 && queue_size != 131072 && queue_size != 1048576 {
		return(create_queue_result[T]::Err("unsupported queue size"))
	}

	let bq_init = match (queue_size) {
		1024 => bq_init_1024,
		16384 => bq_init_16384,
		131072 => bq_init_131072,
		1048576 => bq_init_1048576,
		_ => bq_init_NA
	};

	let bq_ensure_enqueue = match (queue_size) {
		1024 => bq_ensure_enqueue_1024,
		16384 => bq_ensure_enqueue_16384,
		131072 => bq_ensure_enqueue_131072,
		1048576 => bq_ensure_enqueue_1048576,
		_ => bq_ensure_enqueue_NA
	};

	let bq_put_data = match (queue_size) {
		1024 => bq_put_data_1024,
		16384 => bq_put_data_16384,
		131072 => bq_put_data_131072,
		1048576 => bq_put_data_1048576,
		_ => bq_put_data_NA
	};

	let bq_ensure_dequeue = match (queue_size) {
		1024 => bq_ensure_dequeue_1024,
		16384 => bq_ensure_dequeue_16384,
		131072 => bq_ensure_dequeue_131072,
		1048576 => bq_ensure_dequeue_1048576,
		_ => bq_ensure_dequeue_NA
	};

	let bq_read_data = match (queue_size) {
		1024 => bq_read_data_1024,
		16384 => bq_read_data_16384,
		131072 => bq_read_data_131072,
		1048576 => bq_read_data_1048576,
		_ => bq_read_data_NA
	};

	let bq_size = match (queue_size) {
		1024 => bq_size_1024,
		16384 => bq_size_16384,
		131072 => bq_size_131072,
		1048576 => bq_size_1048576,
		_ => bq_size_NA
	};


	let queue_device_alloc = device.alloc((2 * queue_size as i64 + 4) * sizeof[u32]());
	let queue_device_memory = queue_device_alloc.data as &mut addrspace(1) [u8];

	create_queue_result[T]::Ok(ProducerConsumerQueue[u32] {
		push = @|source| @|_thread| {
			if bq_ensure_enqueue(queue_device_memory) {
				bq_put_data(queue_device_memory, source());
				1
			}
			else {
				0
			}
		},

		pop = @|sink| @|_thread| {
			if bq_ensure_dequeue(queue_device_memory) {
				sink(bq_read_data(queue_device_memory));
				1
			}
			else {
				0
			}
		},

		size = @|_thread| bq_size(queue_device_memory),

		reset = @|grid| {
			for _thread in grid.threads() {
				bq_init(queue_device_memory);
			}
		},

		validate = @|_corrupted, _grid| {
		},

		release = @|| {
		}
	})
}
