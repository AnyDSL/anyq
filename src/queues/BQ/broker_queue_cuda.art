// AnyQ wrapper for reference implementation published with
// Bernhard Kerbl, Michael Kenzel, Joerg H. Mueller, Dieter Schmalstieg, Markus Steinberger, 2018, The Broker Queue: A Fast, Linearizable FIFO Queue for Fine-Granular Work Distribution on the GPU
// ICS '18: Proceedings of the 2018 International Conference on Supercomputing, pages 76â€“85
// https://doi.org/10.1145/3205289.3205291


#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000EE4initEv")] fn bq_init_1000() -> ();
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi10000EE4initEv")] fn bq_init_10000() -> ();
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi100000EE4initEv")] fn bq_init_100000() -> ();
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000000EE4initEv")] fn bq_init_1000000() -> ();
#[import(cc = "C", name = "bq_init_NA")] fn bq_init_NA() -> ();

#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000EE14ensure_enqueueEv")] fn bq_ensure_enqueue_1000() -> bool;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi10000EE14ensure_enqueueEv")] fn bq_ensure_enqueue_10000() -> bool;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi100000EE14ensure_enqueueEv")] fn bq_ensure_enqueue_100000() -> bool;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000000EE14ensure_enqueueEv")] fn bq_ensure_enqueue_1000000() -> bool;
#[import(cc = "C", name = "bq_ensure_enqueue_NA")] fn bq_ensure_enqueue_NA() -> bool;

#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000EE8put_dataEj")] fn bq_put_data_1000(u32) -> ();
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi10000EE8put_dataEj")] fn bq_put_data_10000(u32) -> ();
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi100000EE8put_dataEj")] fn bq_put_data_100000(u32) -> ();
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000000EE8put_dataEj")] fn bq_put_data_1000000(u32) -> ();
#[import(cc = "C", name = "bq_put_data_NA")] fn bq_put_data_NA(u32) -> ();

#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000EE14ensure_dequeueEv")] fn bq_ensure_dequeue_1000() -> bool;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi10000EE14ensure_dequeueEv")] fn bq_ensure_dequeue_10000() -> bool;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi100000EE14ensure_dequeueEv")] fn bq_ensure_dequeue_100000() -> bool;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000000EE14ensure_dequeueEv")] fn bq_ensure_dequeue_1000000() -> bool;
#[import(cc = "C", name = "bq_ensure_dequeue_NA")] fn bq_ensure_dequeue_NA() -> bool;

#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000EE9read_dataEv")] fn bq_read_data_1000() -> u32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi10000EE9read_dataEv")] fn bq_read_data_10000() -> u32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi100000EE9read_dataEv")] fn bq_read_data_100000() -> u32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000000EE9read_dataEv")] fn bq_read_data_1000000() -> u32;
#[import(cc = "C", name = "bq_read_data_NA")] fn bq_read_data_NA() -> u32;

#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000EE4sizeEv")] fn bq_size_1000() -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi10000EE4sizeEv")] fn bq_size_10000() -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi100000EE4sizeEv")] fn bq_size_100000() -> i32;
#[import(cc = "C", name = "_ZN13BWDIndexQueueILi1000000EE4sizeEv")] fn bq_size_1000000() -> i32;
#[import(cc = "C", name = "bq_size_NA")] fn bq_size_NA() -> i32;


fn @createBrokerWorkDistributorQueueCUDA(_device: AccDevice, queue_size: i32) -> ProducerConsumerQueue[u32] {
	let bq_init = match (queue_size) {
		1000 => bq_init_1000,
		10000 => bq_init_10000,
		100000 => bq_init_100000,
		1000000 => bq_init_1000000,
		_ => bq_init_NA
	};

	let bq_ensure_enqueue = match (queue_size) {
		1000 => bq_ensure_enqueue_1000,
		10000 => bq_ensure_enqueue_10000,
		100000 => bq_ensure_enqueue_100000,
		1000000 => bq_ensure_enqueue_1000000,
		_ => bq_ensure_enqueue_NA
	};

	let bq_put_data = match (queue_size) {
		1000 => bq_put_data_1000,
		10000 => bq_put_data_10000,
		100000 => bq_put_data_100000,
		1000000 => bq_put_data_1000000,
		_ => bq_put_data_NA
	};

	let bq_ensure_dequeue = match (queue_size) {
		1000 => bq_ensure_dequeue_1000,
		10000 => bq_ensure_dequeue_10000,
		100000 => bq_ensure_dequeue_100000,
		1000000 => bq_ensure_dequeue_1000000,
		_ => bq_ensure_dequeue_NA
	};

	let bq_read_data = match (queue_size) {
		1000 => bq_read_data_1000,
		10000 => bq_read_data_10000,
		100000 => bq_read_data_100000,
		1000000 => bq_read_data_1000000,
		_ => bq_read_data_NA
	};

	let bq_size = match (queue_size) {
		1000 => bq_size_1000,
		10000 => bq_size_10000,
		100000 => bq_size_100000,
		1000000 => bq_size_1000000,
		_ => bq_size_NA
	};

	ProducerConsumerQueue[u32] {
		push = @|source:fn()->u32| @|_thread:thread_context| -> i32 {
			if bq_ensure_enqueue() {
				bq_put_data(source());
				1
			}
			else {
				0
			}
		},

		pop = @|sink:fn(u32)->()| @|_thread:thread_context| -> i32 {
			if bq_ensure_dequeue() {
				sink(bq_read_data());
				1
			}
			else {
				0
			}
		},

		size = @|_thread| bq_size(),

		reset = @|grid| {
			for _thread in grid.threads() {
				bq_init();
			}
		},

		validate = @|_corrupted: &mut addrspace(1) u32, _grid| {
		},

		release = @|| {
		}
	}
}
