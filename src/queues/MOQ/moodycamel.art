
type MoodycamelCQHandle = i64;
type MoodycamelValue = i64;

#[import(cc = "C", name = "moodycamel_cq_create")]       fn moodycamel_cq_create(_capacity: u32, _num_producer: u32, _out_handle: &mut MoodycamelCQHandle) -> i32;
#[import(cc = "C", name = "moodycamel_cq_destroy")]      fn moodycamel_cq_destroy(_: MoodycamelCQHandle) -> i32;
#[import(cc = "C", name = "moodycamel_cq_try_enqueue")]  fn moodycamel_cq_try_enqueue(_: MoodycamelCQHandle, _: MoodycamelValue) -> i32;
#[import(cc = "C", name = "moodycamel_cq_try_dequeue")]  fn moodycamel_cq_try_dequeue(_: MoodycamelCQHandle, _:&mut MoodycamelValue) -> i32;
#[import(cc = "C", name = "moodycamel_cq_size_approx")]  fn moodycamel_cq_size_approx(_: MoodycamelCQHandle) -> i64;


fn @createMoodyCamelQueueGeneric[T](device: AccDevice, pool_size: i32) -> create_queue_result[T] {
	if pool_size < 0 {
		return(create_queue_result[T]::Err("invalid pool size"))
	}

	let num_producer:u32 = cpu_threads as u32;

	let buffer_size = pool_size as i64 * sizeof[T]();

	let buffer = device.alloc(buffer_size);
	let memory = buffer.data as &mut addrspace(1) [T];

	let mut alloc_next:u32 = 0;
	let alloc_ptr = &mut alloc_next as &mut addrspace(1) u32;

	let nil:u32 = -1;
	let alloc_slot = @|thread:thread_context| -> u32 {
		let new_slot = thread.atomic_add_global_u32(alloc_ptr, 1, memory_order::relaxed);

		if new_slot < pool_size as u32 {
			new_slot
		}
		else {
			thread.atomic_sub_global_u32(alloc_ptr, 1, memory_order::relaxed);
			nil
		}
	};

	let mut queue:MoodycamelCQHandle;

	let success = moodycamel_cq_create(pool_size as u32, num_producer, &mut queue);
	assert(success > 0, "moodycamel_cq_create() failed");

	create_queue_result[T]::Ok(ProducerConsumerQueue[T] {
		push = @|source| @|thread| {
			let slot = alloc_slot(thread);
			if (slot != nil) {
				memory(slot) = source();
				let success = moodycamel_cq_try_enqueue(queue, slot as i64);
				if success > 0 { 1 } else { 0 }
			} else {
				0
			}
		},

		pop = @|sink| @|thread| {
			let mut slot:i64 = thread.idx(0) as i64;
			let success = moodycamel_cq_try_dequeue(queue, &mut slot);
			if success > 0 {
				let value:T = memory(slot);
				sink(value);
				1
			} else {
				0
			}
		},

		size = @|_thread| {
			moodycamel_cq_size_approx(queue) as i32
		},

		reset = @|grid| {
			for thread in grid.threads() {
				if thread.idx(0) == 0 {
					let mut success:i32;
					success = moodycamel_cq_destroy(queue);
					assert(success > 0, "moodycamel_cq_destroy() failed");
					success = moodycamel_cq_create(pool_size as u32, num_producer, &mut queue);
					assert(success > 0, "moodycamel_cq_create() failed");
					alloc_next = 0;
				}
			}
		},

		validate = @|_corrupted, _grid| {
		},

		release = @|| {
			let success = moodycamel_cq_destroy(queue);
			assert(success > 0, "moodycamel_cq_destroy() failed");
		}
	})
}


#[import(cc = "C")] fn moodycamel_cq_create_u32(_capacity: u32, _num_producer: u32, _out_handle: &mut MoodycamelCQHandle) -> i32;
#[import(cc = "C")] fn moodycamel_cq_destroy_u32(_: MoodycamelCQHandle) -> i32;
#[import(cc = "C")] fn moodycamel_cq_try_enqueue_u32(_: MoodycamelCQHandle, _value: u32) -> i32;
#[import(cc = "C")] fn moodycamel_cq_try_dequeue_u32(_: MoodycamelCQHandle, _out_value: &mut u32) -> i32;
#[import(cc = "C")] fn moodycamel_cq_size_approx_u32(_: MoodycamelCQHandle) -> u64;


fn @createMoodyCamelIndexQueue(device: AccDevice, num_elements: i32) -> create_queue_result[u32] {
	if num_elements < 0 {
		return(create_queue_result[u32]::Err("invalid queue size"))
	}

	let num_producer:u32 = cpu_threads as u32;

	assert(device.platform_device == 0, "moodycamel::ConcurrentQueue is CPU only");

	/*
	let buffer_size = pool_size as i64 * sizeof[T]();

	let buffer = device.alloc(buffer_size);
	let memory = buffer.data as &mut addrspace(1) [T];
	*/
	//let mut alloc_next:u32 = 0;
	//let alloc_ptr = &mut alloc_next as &mut addrspace(1) u32;

	let nil:u32 = -1;
	let alloc_slot = @|_thread:thread_context| -> u32 {
		/* let new_slot = thread.atomic_add_global_u32(alloc_ptr, 1, memory_order::relaxed);

		if new_slot < pool_size as u32 {
			new_slot
		}
		else {
			thread.atomic_sub_global_u32(alloc_ptr, 1, memory_order::relaxed);
			nil
		} */
		0
	};

	let mut queue:MoodycamelCQHandle;

	let success = moodycamel_cq_create_u32(num_elements as u32, num_producer, &mut queue);
	assert(success > 0, "moodycamel_cq_create_u32() failed");

	create_queue_result[u32]::Ok(ProducerConsumerQueue[u32] {
		push = @|source| @|thread| {
			let slot = alloc_slot(thread);
			if (slot != nil) {
				let value = source();
				let success = moodycamel_cq_try_enqueue_u32(queue, value);
				if success > 0 { 1 } else { 0 }
			} else {
				0
			}
		},

		pop = @|sink| @|thread| {
			let mut value:u32 = thread.idx(0);
			let success = moodycamel_cq_try_dequeue_u32(queue, &mut value);
			if success > 0 {
				sink(value);
				1
			} else {
				0
			}
		},

		size = @|_thread| {
			moodycamel_cq_size_approx_u32(queue) as i32
		},

		reset = @|grid| {
			for thread in grid.threads() {
				if thread.idx(0) == 0 {
					let mut success:i32;
					success = moodycamel_cq_destroy_u32(queue);
					assert(success > 0, "moodycamel_cq_destroy() failed");
					success = moodycamel_cq_create_u32(num_elements as u32, num_producer, &mut queue);
					assert(success > 0, "moodycamel_cq_create_u32() failed");
				}
			}
		},

		validate = @|_corrupted, _grid| {
		},

		release = @|| {
			let success = moodycamel_cq_destroy_u32(queue);
			assert(success > 0, "moodycamel_cq_destroy_u32() failed");
		}
	})
}
