

fn main() -> i32 {
	let test = createCUDATest(0, 0);

	let group_size = 512;
	let num_groups = 42;

	with device, device_memory, device_failed_flag in test.run_test() {
		with grid in cuda_launch_1d(device, num_groups, group_size) {
			with thread in grid.threads() {
				cuda_atomic_add_global_u32(device_failed_flag, thread.idx() as u32);
			}
		}

		true
	}

	with device, device_memory, device_failed_flag in test.run_test() {
		with grid in cuda_launch_1d(device, num_groups, group_size) {
			with group in grid.groups() {
				with wave in group.waves() {
					with thread in wave.threads() {
						cuda_atomic_sub_global_u32(device_failed_flag, ((group.idx() * group.num_waves() + wave.idx()) * wave.num_threads() + thread.idx()) as u32);
					}
				}
			}
		}

		true
	}

	with device, device_memory, device_failed_flag in test.run_test() {
		with grid in cuda_launch_1d(device, num_groups, group_size) {
			with group in grid.groups() {
				with thread in group.threads() {
					cuda_atomic_add_global_u32(device_failed_flag, (group.idx() * group.num_threads() + thread.idx()) as u32);
				}
			}
		}

		true
	}

	with device, device_memory, device_failed_flag in test.run_test() {
		with grid in cuda_launch_1d(device, num_groups, group_size) {
			with wave in grid.groups() {
				with thread in wave.threads() {
					cuda_atomic_sub_global_u32(device_failed_flag, (wave.idx() * wave.num_threads() + thread.idx()) as u32);
				}
			}
		}

		true
	}

	test.finish()
}
