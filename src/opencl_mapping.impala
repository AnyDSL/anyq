
// require device with OpenCL 2.1 support (and cl_intel_subgroups extension)
static opencl_device = 1;

fn @createAccDevice() -> AccDevice {
	AccDevice {
		launch_1d: @|num_groups, group_size, body| {
			opencl_launch_1d(opencl_device, num_groups, group_size, body)
		},
		alloc: @|size| alloc_opencl(opencl_device, size),
		platform_device: runtime_device(2, opencl_device)
	}
}

fn AtomicFn_u64(&mut[1] u64, u64) -> u64 { undef[u64]() }
fn AtomicFn_f32(&mut[1] f32, f32) -> f32 { undef[f32]() }

extern "device" {
    fn "atomic_add"     opencl_atomic_add_global_i32     (&mut[1]i32, i32) -> i32;
    fn "atomic_add"     opencl_atomic_add_global_u32     (&mut[1]u32, u32) -> u32;
    fn "atomic_sub"     opencl_atomic_sub_global_i32     (&mut[1]i32, i32) -> i32;
    fn "atomic_sub"     opencl_atomic_sub_global_u32     (&mut[1]u32, u32) -> u32;
    fn "atomic_and"     opencl_atomic_and_global_i32     (&mut[1]i32, i32) -> i32;
    fn "atomic_and"     opencl_atomic_and_global_u32     (&mut[1]u32, u32) -> u32;
    fn "atomic_or"      opencl_atomic_or_global_i32      (&mut[1]i32, i32) -> i32;
    fn "atomic_or"      opencl_atomic_or_global_u32      (&mut[1]u32, u32) -> u32;
    fn "atomic_xor"     opencl_atomic_xor_global_i32     (&mut[1]i32, i32) -> i32;
    fn "atomic_xor"     opencl_atomic_xor_global_u32     (&mut[1]u32, u32) -> u32;
    fn "atomic_xchg"    opencl_atomic_xchg_global_i32    (&mut[1]i32, i32) -> i32;
    fn "atomic_xchg"    opencl_atomic_xchg_global_u32    (&mut[1]u32, u32) -> u32;
    fn "atomic_cmpxchg" opencl_atomic_cmpxchg_global_i32 (&mut[1]i32, i32, i32) -> i32;
    fn "atomic_cmpxchg" opencl_atomic_cmpxchg_global_u32 (&mut[1]u32, u32, u32) -> u32;
    fn "atomic_min"     opencl_atomic_min_global_i32     (&mut[1]i32, i32) -> i32;
    fn "atomic_min"     opencl_atomic_min_global_u32     (&mut[1]u32, u32) -> u32;
    fn "atomic_max"     opencl_atomic_max_global_i32     (&mut[1]i32, i32) -> i32;
    fn "atomic_max"     opencl_atomic_max_global_u32     (&mut[1]u32, u32) -> u32;
    fn "atomic_inc"     opencl_atomic_inc_global_u32     (&mut[1]u32, u32) -> u32;
    fn "atomic_dec"     opencl_atomic_dec_global_u32     (&mut[1]u32, u32) -> u32;

    fn "work_group_barrier"      opencl_work_group_barrier     (u32) -> ();
    fn "sub_group_barrier"       opencl_sub_group_barrier      (u32) -> ();
    fn "get_sub_group_size"      opencl_get_sub_group_size     () -> u32;
    fn "get_num_sub_groups"      opencl_get_num_sub_groups     () -> u32;
    fn "get_sub_group_local_id"  opencl_get_sub_group_local_id () -> u32;

    fn "sub_group_all"           opencl_sub_group_all (i32) -> i32;
    fn "sub_group_any"           opencl_sub_group_any (i32) -> i32;

    fn "intel_sub_group_shuffle"      opencl_intel_sub_group_shuffle_i32 (i32, u32) -> i32;
    fn "intel_sub_group_shuffle"      opencl_intel_sub_group_shuffle_u32 (u32, u32) -> u32;
    fn "intel_sub_group_shuffle"      opencl_intel_sub_group_shuffle_f32 (f32, u32) -> f32;
    fn "intel_sub_group_shuffle_down" opencl_intel_sub_group_shuffle_down_i32 (i32, i32, u32) -> i32;
    fn "intel_sub_group_shuffle_down" opencl_intel_sub_group_shuffle_down_u32 (u32, u32, u32) -> u32;
    fn "intel_sub_group_shuffle_down" opencl_intel_sub_group_shuffle_down_f32 (f32, f32, u32) -> f32;
    fn "intel_sub_group_shuffle_up"   opencl_intel_sub_group_shuffle_up_i32   (i32, i32, u32) -> i32;
    fn "intel_sub_group_shuffle_up"   opencl_intel_sub_group_shuffle_up_u32   (u32, u32, u32) -> u32;
    fn "intel_sub_group_shuffle_up"   opencl_intel_sub_group_shuffle_up_f32   (f32, f32, u32) -> f32;
    fn "intel_sub_group_shuffle_xor"  opencl_intel_sub_group_shuffle_xor_i32  (i32, u32) -> i32;
    fn "intel_sub_group_shuffle_xor"  opencl_intel_sub_group_shuffle_xor_u32  (u32, u32) -> u32;
    fn "intel_sub_group_shuffle_xor"  opencl_intel_sub_group_shuffle_xor_f32  (f32, u32) -> f32;
}

fn @opencl_thread(idx: fn () -> u32, body: fn (gpu_thread_context) -> ()) -> () {
	@@body(gpu_thread_context {
		idx: idx,

		atomic_add_global_i32: opencl_atomic_add_global_i32,
		atomic_add_global_u32: opencl_atomic_add_global_u32,
		atomic_add_global_u64: AtomicFn_u64,
		atomic_add_global_f32: AtomicFn_f32,
		// atomic_add_global_f64: cuda_atomic_add_global_f64,

		atomic_sub_global_i32: opencl_atomic_sub_global_i32,
		atomic_sub_global_u32: opencl_atomic_sub_global_u32,
		atomic_sub_global_u64: AtomicFn_u64,
		atomic_sub_global_f32: AtomicFn_f32,
		// atomic_sub_global_f64: cuda_atomic_sub_global_f64,

		atomic_and_global_i32: opencl_atomic_and_global_i32,
		atomic_and_global_u32: opencl_atomic_and_global_u32,
		atomic_and_global_u64: AtomicFn_u64,

		atomic_or_global_i32: opencl_atomic_or_global_i32,
		atomic_or_global_u32: opencl_atomic_or_global_u32,
		atomic_or_global_u64: AtomicFn_u64,

		atomic_xor_global_i32: opencl_atomic_xor_global_i32,
		atomic_xor_global_u32: opencl_atomic_xor_global_u32,
		atomic_xor_global_u64: AtomicFn_u64,

		atomic_exch_global_i32: opencl_atomic_xchg_global_i32,
		atomic_exch_global_u32: opencl_atomic_xchg_global_u32,
		atomic_exch_global_u64: AtomicFn_u64,
		atomic_exch_global_f32: AtomicFn_f32,

		atomic_min_global_i32: opencl_atomic_min_global_i32,
		atomic_min_global_u32: opencl_atomic_min_global_u32,
		atomic_min_global_u64: AtomicFn_u64,

		atomic_max_global_i32: opencl_atomic_max_global_i32,
		atomic_max_global_u32: opencl_atomic_max_global_u32,
		atomic_max_global_u64: AtomicFn_u64,

		// atomic_cas_global_u16: cuda_atomic_cas_global_u16,
		atomic_cas_global_i32: opencl_atomic_cmpxchg_global_i32,
		atomic_cas_global_u32: opencl_atomic_cmpxchg_global_u32,
		atomic_cas_global_i64: /* TODO */ @|p: &mut[1] u64, cmp: u64, val: u64| -> u64 { undef[u64]() },

		atomic_inc_global_u32: opencl_atomic_inc_global_u32,
		atomic_dec_global_u32: opencl_atomic_dec_global_u32,

		yield: @|| { }//cuda_nanosleep(0u32)
	});
}

fn @ShuffleDirFn_i32(i32, u32, i32) -> i32 { undef[i32]() }
fn @ShuffleDirFn_u32(u32, u32, i32) -> u32 { undef[u32]() }
fn @ShuffleDirFn_f32(f32, u32, i32) -> f32 { undef[f32]() }


fn @opencl_subwarp(membermask: u32, num_threads: fn () -> u32, idx: fn () -> u32, body: fn (gpu_wave_context) -> ()) -> () {
	@@body(gpu_wave_context{
		idx: idx,

		membermask: @|| membermask,

		threads: @|body| opencl_thread(@|| opencl_get_sub_group_local_id(), body),

		num_threads: num_threads,

		barrier: @|| opencl_sub_group_barrier(1u32),
		barrier_all: @|predicate| opencl_sub_group_all(predicate),
		barrier_any: @|predicate| opencl_sub_group_any(predicate),
		barrier_count: @|predicate| { undef[i32]() }, //cuda_popc_u32(cuda_warp_sync_vote(membermask, predicate)),
		barrier_vote: @|predicate| { undef[u32]() }, //cuda_warp_sync_vote(membermask, predicate),

		// activemask: cuda_warp_activemask,

		/* TODO: assert width = num_threads */
		shfl_i32: @|x:i32, src_lane:i32, width:i32| opencl_intel_sub_group_shuffle_i32(x, src_lane as u32),
		shfl_u32: @|x:u32, src_lane:i32, width:i32| opencl_intel_sub_group_shuffle_u32(x, src_lane as u32),
		// shfl_i64: @|x:i64, src_lane:i32, width:i32| cuda_warp_shfl_i64(membermask, x, src_lane, width),
		// shfl_u64: @|x:u64, src_lane:i32, width:i32| cuda_warp_shfl_u64(membermask, x, src_lane, width),
		shfl_f32: @|x:f32, src_lane:i32, width:i32| opencl_intel_sub_group_shuffle_f32(x, src_lane as u32),
		// shfl_f64: @|x:f64, src_lane:i32, width:i32| cuda_warp_shfl_f64(membermask, x, src_lane, width),

		shfl_up_i32: ShuffleDirFn_i32, //@|x:i32, delta:u32, width:i32| cuda_warp_shfl_up_i32(membermask, x, delta, width),
		shfl_up_u32: ShuffleDirFn_u32, //@|x:u32, delta:u32, width:i32| cuda_warp_shfl_up_u32(membermask, x, delta, width),
		// shfl_up_i64: @|x:i64, delta:u32, width:i32| cuda_warp_shfl_up_i64(membermask, x, delta, width),
		// shfl_up_u64: @|x:u64, delta:u32, width:i32| cuda_warp_shfl_up_u64(membermask, x, delta, width),
		shfl_up_f32: ShuffleDirFn_f32, //@|x:f32, delta:u32, width:i32| cuda_warp_shfl_up_f32(membermask, x, delta, width),
		// shfl_up_f64: @|x:f64, delta:u32, width:i32| cuda_warp_shfl_up_f64(membermask, x, delta, width),

		shfl_down_i32: ShuffleDirFn_i32, //@|x:i32, delta:u32, width:i32| cuda_warp_shfl_down_i32(membermask, x, delta, width),
		shfl_down_u32: ShuffleDirFn_u32, //@|x:u32, delta:u32, width:i32| cuda_warp_shfl_down_u32(membermask, x, delta, width),
		// shfl_down_i64: @|x:i64, delta:u32, width:i32| cuda_warp_shfl_down_i64(membermask, x, delta, width),
		// shfl_down_u64: @|x:u64, delta:u32, width:i32| cuda_warp_shfl_down_u64(membermask, x, delta, width),
		shfl_down_f32: ShuffleDirFn_f32, //@|x:f32, delta:u32, width:i32| cuda_warp_shfl_down_f32(membermask, x, delta, width),
		// shfl_down_f64: @|x:f64, delta:u32, width:i32| cuda_warp_shfl_down_f64(membermask, x, delta, width),

		shfl_xor_i32: @|x:i32, lane_mask:i32, width:i32| opencl_intel_sub_group_shuffle_xor_i32(x, lane_mask as u32),
		shfl_xor_u32: @|x:u32, lane_mask:i32, width:i32| opencl_intel_sub_group_shuffle_xor_u32(x, lane_mask as u32),
		// shfl_xor_i64: @|x:i64, lane_mask:i32, width:i32| cuda_warp_shfl_xor_i64(membermask, x, lane_mask, width),
		// shfl_xor_u64: @|x:u64, lane_mask:i32, width:i32| cuda_warp_shfl_xor_u64(membermask, x, lane_mask, width),
		shfl_xor_f32: @|x:f32, lane_mask:i32, width:i32| opencl_intel_sub_group_shuffle_xor_f32(x, lane_mask as u32),
		// shfl_xor_f64: @|x:f64, lane_mask:i32, width:i32| cuda_warp_shfl_xor_f64(membermask, x, lane_mask, width),

		// match_any_i32: @|x:i32| cuda_warp_match_any_i32(membermask, x),
		// match_any_u32: @|x:u32| cuda_warp_match_any_u32(membermask, x),
		// match_any_i64: @|x:i64| cuda_warp_match_any_i64(membermask, x),
		// match_any_u64: @|x:u64| cuda_warp_match_any_u64(membermask, x),
		// match_any_f32: @|x:f32| cuda_warp_match_any_f32(membermask, x),
		// match_any_f64: @|x:f64| cuda_warp_match_any_f64(membermask, x),

		// match_all_i32: @|x:i32, predicate:&mut i32| cuda_warp_match_all_i32(membermask, x, predicate),
		// match_all_u32: @|x:u32, predicate:&mut i32| cuda_warp_match_all_u32(membermask, x, predicate),
		// match_all_i64: @|x:i64, predicate:&mut i32| cuda_warp_match_all_i64(membermask, x, predicate),
		// match_all_u64: @|x:u64, predicate:&mut i32| cuda_warp_match_all_u64(membermask, x, predicate),
		// match_all_f32: @|x:f32, predicate:&mut i32| cuda_warp_match_all_f32(membermask, x, predicate),
		// match_all_f64: @|x:f64, predicate:&mut i32| cuda_warp_match_all_f64(membermask, x, predicate),

		lanemask: cuda_lanemask,
		lanemask_le: cuda_lanemask_le,
		lanemask_lt: cuda_lanemask_lt,
		lanemask_ge: cuda_lanemask_ge,
		lanemask_gt: cuda_lanemask_gt
	});
}

fn @opencl_block(num_threads: fn () -> u32, idx: fn () -> u32, body: fn (gpu_group_context) -> ()) -> () {
	// TODO: OpenCL's wave size?
	let sub_group_size = @|| opencl_get_sub_group_size() as u32;

	@@body(gpu_group_context {
		idx: idx,
		waves: @|body| opencl_subwarp(!0u32, sub_group_size, @|| opencl_get_local_id(0u) as u32 / sub_group_size(), body),
		threads: @|body| opencl_thread(@|| opencl_get_local_id(0u) as u32, body),
		num_waves: @|| opencl_get_num_sub_groups(),
		num_threads: num_threads,
		barrier: @|| opencl_barrier(2u32),
		barrier_all: @|n:i32| { undef[i32]() }, //cuda_block_sync_all,
		barrier_any: @|n:i32| { undef[i32]() }, //cuda_block_sync_any,
		barrier_count: @|n:i32| { undef[i32]() } //cuda_block_sync_count
	});
}

fn opencl_launch_1d(device: i32, grid_dim: i32, block_dim: i32, body: fn (gpu_grid_context, gpu_intrinsics) -> ()) -> () {
	// TODO: assert(warp_size == 32)

	let num_threads_per_block = @|| {
		if ?(block_dim as u32) {
			block_dim as u32
		}
		else {
			opencl_get_local_size(0u) as u32
		}
	};

	// TODO: OpenCL's wave size
	let num_warps_per_block = @|| {
		opencl_get_num_sub_groups() //(num_threads_per_block() + 31u32) / 32u32
	};

	let num_blocks = @|| {
		if ?(grid_dim as u32) {
			grid_dim as u32
		}
		else {
			opencl_get_num_groups(0u) as u32
		}
	};

	let num_warps = @|| {
		num_blocks() * num_warps_per_block()
	};

	let num_threads = @|| {
		num_blocks() * num_threads_per_block()
	};

	opencl(device, (grid_dim * block_dim, 1, 1), (block_dim, 1, 1), @|| @@body(gpu_grid_context {
		device: device,
		groups: @|body| opencl_block(num_threads_per_block, @|| opencl_get_group_id(0u) as u32, body),
		waves: @|body| opencl_subwarp(!0u32, @|| opencl_get_num_sub_groups(), @|| opencl_get_group_id(0u) as u32 * num_warps_per_block() + opencl_get_local_id(0u) as u32 / 32u32, body),
		threads: @|body| opencl_thread(@|| opencl_get_group_id(0u) as u32 * num_threads_per_block() + opencl_get_local_id(0u) as u32, body),
		num_groups: num_blocks,
		num_waves: num_warps,
		num_threads: num_threads
	}, opencl_gpu_intrinsics()));
}

extern "device" {
	fn "convert_uint"  opencl_float_as_uint(f32) -> u32;
	fn "convert_float" opencl_uint_as_float(u32) -> f32;
}

fn @opencl_gpu_intrinsics() -> gpu_intrinsics {
	gpu_intrinsics {
		expf: opencl_expf,
		exp2f: opencl_exp2f,
		logf: opencl_logf,
		log2f: opencl_log2f,
		powf: opencl_powf,
		rsqrtf: opencl_rsqrtf,
		sqrtf: opencl_sqrtf,
		fabsf: opencl_fabsf,
		sinf: opencl_sinf,
		cosf: opencl_cosf,
		tanf: opencl_tanf,
		asinf: opencl_asinf,
		acosf: opencl_acosf,
		atanf: opencl_atanf,
		erff: opencl_erff,
		atan2f: opencl_atan2f,
		fmaxf: opencl_fmaxf,
		fminf: opencl_fminf,
		fmodf: opencl_fmodf,
		floorf: opencl_floorf,
		fmaf: opencl_fmaf,
		madf: opencl_madf,
		isinff: opencl_isinff,
		isnanf: opencl_isnanf,
		isfinitef: opencl_isfinitef,
		copysignf: opencl_copysignf,

		float_as_uint: opencl_float_as_uint,
		uint_as_float : opencl_uint_as_float
	}
}
