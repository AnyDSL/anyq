fn @get_member_mask_u32(size: u32) -> u32 {
	if size == 32 { -1 } else { (1 << size) - 1 }
}

fn @get_member_mask_u64(size: u32) -> u64 {
	if size == 64 { -1 } else { (1 << size as u64) - 1 }
}

fn @div_up(a: i32, b: i32) -> i32 {
	(a + b - 1) / b
}

type index_wrapper = fn(fn(i32) -> u32) -> fn(i32) -> u32;
type dim_wrapper = fn(fn(i32) -> u32) -> fn(i32) -> u32;

fn @wrap_index_1d(idx: fn(i32) -> u32) -> fn(i32) -> u32 {
	@|i: i32| -> u32 {
		if ?i {
			match i { 0 => idx(0), _ => 0 }
		}
		else {
			idx(i)
		}
	}
}

fn @wrap_index_2d(idx: fn(i32) -> u32) -> fn(i32) -> u32 {
	@|i: i32| -> u32 {
		if ?i {
			match i { 0 => idx(0), 1 => idx(1), _ => 0 }
		}
		else {
			idx(i)
		}
	}
}

fn @wrap_index_3d(idx: fn(i32) -> u32) -> fn(i32) -> u32 {
	@|i: i32| -> u32 {
		if ?i {
			match i { 0 => idx(0), 1 => idx(1), 2 => idx(2), _ => 0 }
		}
		else {
			idx(i)
		}
	}
}

fn @wrap_dim_1d(idx: fn(i32) -> u32) -> fn(i32) -> u32 {
	@|i: i32| -> u32 {
		if ?i {
			match i { 0 => idx(0), _ => 1 }
		}
		else {
			idx(i)
		}
	}
}

fn @wrap_dim_2d(idx: fn(i32) -> u32) -> fn(i32) -> u32 {
	@|i: i32| -> u32 {
		if ?i {
			match i { 0 => idx(0), 1 => idx(1), _ => 1 }
		}
		else {
			idx(i)
		}
	}
}

fn @wrap_dim_3d(idx: fn(i32) -> u32) -> fn(i32) -> u32 {
	@|i: i32| -> u32 {
		if ?i {
			match i { 0 => idx(0), 1 => idx(1), 2 => idx(2), _ => 1 }
		}
		else {
			idx(i)
		}
	}
}

fn @print_hex(val: i32, skip_leading_zeros: bool) -> () {
	print_char('0'); print_char('x');
	let mut leading = skip_leading_zeros;
	let l = 2 * sizeof[i32]() as i32;
	for i in range(0, l) {
		let curr = (val as u32 >> 4*(l-i-1) as u32) & 0xf as u32;
		leading = leading && (curr == 0) && i < l-1;
		if leading {
			continue()
		}
		let off = if curr < 10 { '0' } else { 'A' - 10 };
		print_char(off + curr as u8);
	}
}

fn @print_binary(value: u32) -> () {
	let group = 4;
	let length = 16;
	for j in range_step(1, length + 1, group) {
		for i in range(j, j + group) {
			let b = 1 << (length - i) as u32;
			if value & b == b {
				print_char('1');
			} else {
				print_char('0');
			}
		}
		print_char(' ');
	}
}


struct AccDevice {
	launch_1d: fn(fn(gpu_grid_context) -> ()) -> fn(i32, i32) -> (),
	synchronize: fn() -> (),
	alloc: fn(i64) -> Buffer,
	platform_device: i32,
	print_i32: fn(&[u8], i32) -> (),
	print_2xi32: fn(&[u8], i32, i32) -> (),
	print_3xi32: fn(&[u8], i32, i32, i32) -> ()
}

struct BaseTest {
	run_test: fn(fn(&mut addrspace(1) [i8], &mut addrspace(1) u32) -> bool) -> fn() -> (),
	finish: fn() -> i32
}

fn createBaseTest(device: AccDevice, additional_mem: i64) -> BaseTest {
	let memory_size = round_up_i64(additional_mem + sizeof[u32](), sizeof[u32]());
	let device_test_state_alloc = device.alloc(memory_size);
	let device_memory = bitcast[&mut addrspace(1) [i8]](device_test_state_alloc.data);
	let device_failed_flag = bitcast[&mut addrspace(1) u32](&mut device_memory((memory_size - sizeof[u32]()) as i32));

	let gpu_result = bitcast[&mut u32](runtime_alloc(0, sizeof[u32]()));
	*gpu_result = 0;
	runtime_copy(0, gpu_result as &[i8], 0, device.platform_device, device_failed_flag as &mut[i8], 0, sizeof[u32]());


	let mut cpu_result: bool = true;

	BaseTest {
		run_test = @|body|@|| {
			cpu_result = cpu_result & body(device_memory, device_failed_flag);
		},

		finish = @|| {
			device.synchronize();

			runtime_copy(device.platform_device, device_failed_flag as &[i8], 0, 0, gpu_result as &mut[i8], 0, sizeof[u32]());

			print_string("gpu_result ");
			print_binary(*gpu_result);
			print_char('\n');
			print_string("cpu_result ");
			print_i32((if cpu_result { 0 } else { 1 }));
			print_char('\n');

			let result = if cpu_result && *gpu_result == 0 { 0 } else { -1 };

			runtime_release(0, gpu_result as &[i8]);
			release(device_test_state_alloc);

			result
		}
	}
}

type ReadFn = fn(i32) -> i32;
type WriteFn = fn(i32, i32) -> ();
type GlobalFn = fn(i32) -> &mut addrspace(1) i32;
type ValidateFn = fn(fn(i32,i32)->bool, fn(i32,i32)->bool, bool) -> bool;

struct IntrinsicsTest {
	run_test: fn(fn(ReadFn, WriteFn, GlobalFn, &mut addrspace(1) u32) -> bool) -> fn() -> (),
	globals: fn(i32) -> i32,
	locals: fn(i32) -> i32,
	validate: ValidateFn,
	finish: fn() -> i32
}

fn createIntrinsicsTest(device: AccDevice, num_globals: i32, init_global: fn(i32)->i32, num_locals: i32, init_local: fn(i32)->i32) -> IntrinsicsTest {
	let additional_mem = (num_globals + num_locals) as i64 * sizeof[i32]();
	let test = createBaseTest(device, additional_mem);

	let buffer = alloc_cpu(additional_mem);
	let data = bitcast[&mut[i32]](buffer.data);

	let mut validation_result = true;

	IntrinsicsTest {
		run_test = @|body|@|| {
			for idx in range(0, num_globals) {
				data(idx) = init_global(idx);
			}
			for idx in range(0, num_locals) {
				data(num_globals + idx) = init_local(idx);
			}

			for device_memory, device_failed_flag in test.run_test() {
				runtime_copy(0, buffer.data, 0, device.platform_device, device_memory as &mut[i8], 0, additional_mem);

				let read = @|idx:i32| -> i32 { let ptr = bitcast[& addrspace(1) [i32]](device_memory); ptr(idx + num_globals) };
				let write = @|idx:i32, value:i32| -> () { let ptr = bitcast[&mut addrspace(1) [i32]](device_memory); ptr(idx + num_globals) = value; };
				let global = @|idx:i32| -> &mut addrspace(1)  i32 { let ptr = bitcast[&mut addrspace(1) [i32]](device_memory); &mut(ptr(idx)) };

				let result = body(read, write, global, device_failed_flag);
				device.synchronize();

				runtime_copy(device.platform_device, device_memory as &mut[i8], 0, 0, buffer.data, 0, additional_mem);

				result
			}
		},

		globals = @|idx| { data(idx) },
		locals =  @|idx| { data(num_globals + idx) },

		validate = @|validate_global: fn(i32,i32)->bool, validate_local: fn(i32,i32)->bool, stop_on_first_fail:bool| -> bool {
			let mut result = true;

			for idx in range(0, num_globals) {
					let check = validate_global(idx, data(idx));
					if !check {
						print_string("validation failed! global("); print_hex(idx, false); print_string(") = "); print_i32(data(idx)); print_char('\n');
						if stop_on_first_fail { return(false) }
					}
					result &= check;
			}
			for idx in range(0, num_locals) {
					let check = validate_local(idx, data(num_globals + idx));
					if !check {
						print_string("validation failed! local("); print_hex(idx, false); print_string(") = "); print_i32(data(num_globals + idx)); print_char('\n');
						if stop_on_first_fail { return(false) }
					}
					result &= check;
			}

			validation_result &= result;

			result
		},

		finish = @|| {
			release(buffer);

			let test_result = test.finish();
			if !validation_result { -2 } else { test_result }
		}
	}
}
