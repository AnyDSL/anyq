
enum memory_order {
	relaxed,
	acquire,
	release,
	acq_rel,
	seq_cst
}

fn @is_weaker_memory_order(a: memory_order, b: memory_order) -> bool {
	builtin_memory_order(a) < builtin_memory_order(b)
}

fn @stronger_memory_order(a: memory_order, b: memory_order) -> memory_order {
	if is_weaker_memory_order(a, b) { b } else { a }
}

fn @builtin_memory_order(order: memory_order) -> u32 {
	match order {
		memory_order::relaxed => 2,
		memory_order::acquire => 4,
		memory_order::release => 5,
		memory_order::acq_rel => 6,
		memory_order::seq_cst => 7,
	}
}


struct grid_context {
	device: i32,

	groups: fn(fn(group_context) -> ()) -> fn() -> (),
	waves: fn(fn(wave_context) -> ()) -> fn() -> (),
	threads: fn(fn(thread_context) -> ()) -> fn() -> (),

	num_groups: fn(i32) -> u32,
	num_waves: fn() -> u32,
	num_threads: fn(i32) -> u32,
}

struct group_context {
	idx: fn(i32) -> u32,

	waves: fn(fn(wave_context) -> ()) -> fn() -> (),
	threads: fn(fn(thread_context) -> ()) -> fn() -> (),

	num_waves: fn() -> u32,
	num_threads: fn(i32) -> u32,

	barrier: fn() -> (),
	barrier_all: fn(bool) -> bool,
	barrier_any: fn(bool) -> bool,
	barrier_count: fn(bool) -> i32,
}

struct wave_context {
	idx: fn() -> u32,

	membermask: fn() -> u64,

	threads: fn(fn(thread_context) -> ()) -> fn() -> (),

	num_threads: fn() -> u32,

	barrier: fn() -> (),
	barrier_all: fn(bool) -> bool,
	barrier_any: fn(bool) -> bool,
	barrier_count: fn(bool) -> i32,
	barrier_vote: fn(bool) -> u64,

	// activemask: fn() -> u32,

	shfl_i32: fn(i32, i32, u32) -> i32,
	shfl_u32: fn(u32, i32, u32) -> u32,
	// shfl_i64: fn(i64, i32, u32) -> i64,
	// shfl_u64: fn(u64, i32, u32) -> u64,
	// shfl_f32: fn(f32, i32, u32) -> f32,
	// shfl_f64: fn(f64, i32, u32) -> f64,

	shfl_up_i32: fn(i32, u32, u32) -> i32,
	shfl_up_u32: fn(u32, u32, u32) -> u32,
	// shfl_up_i64: fn(i64, u32, u32) -> i64,
	// shfl_up_u64: fn(u64, u32, u32) -> u64,
	// shfl_up_f32: fn(f32, u32, u32) -> f32,
	// shfl_up_f64: fn(f64, u32, u32) -> f64,

	shfl_down_i32: fn(i32, u32, u32) -> i32,
	shfl_down_u32: fn(u32, u32, u32) -> u32,
	// shfl_down_i64: fn(i64, u32, u32) -> i64,
	// shfl_down_u64: fn(u64, u32, u32) -> u64,
	// shfl_down_f32: fn(f32, u32, u32) -> f32,
	// shfl_down_f64: fn(f64, u32, u32) -> f64,

	shfl_bfly_i32: fn(i32, i32, u32) -> i32,
	shfl_bfly_u32: fn(u32, i32, u32) -> u32,
	// shfl_bfly_i64: fn(i64, i32, u32) -> i64,
	// shfl_bfly_u64: fn(u64, i32, u32) -> u64,
	// shfl_bfly_f32: fn(f32, i32, u32) -> f32,
	// shfl_bfly_f64: fn(f64, i32, u32) -> f64,

	// match_any_i32: fn(i32) -> u32,
	// match_any_u32: fn(u32) -> u32,
	// match_any_i64: fn(i64) -> u32,
	// match_any_u64: fn(u64) -> u32,
	// match_any_f32: fn(f32) -> u32,
	// match_any_f64: fn(f64) -> u32,

	// match_all_i32: fn(i32, &mut i32) -> u32,
	// match_all_u32: fn(u32, &mut i32) -> u32,
	// match_all_i64: fn(i64, &mut i32) -> u32,
	// match_all_u64: fn(u64, &mut i32) -> u32,
	// match_all_f32: fn(f32, &mut i32) -> u32,
	// match_all_f64: fn(f64, &mut i32) -> u32,

	lanemask: fn() -> u64,
	lanemask_le: fn() -> u64,
	lanemask_lt: fn() -> u64,
	lanemask_ge: fn() -> u64,
	lanemask_gt: fn() -> u64
}

struct thread_context {
	idx: fn(i32) -> u32,

	gid: fn() -> u32,

	atomic_load_global_i32: fn(&addrspace(1) i32, memory_order) -> i32,
	atomic_load_global_u32: fn(&addrspace(1) u32, memory_order) -> u32,
	atomic_load_global_i64: fn(&addrspace(1) i64, memory_order) -> i64,
	atomic_load_global_u64: fn(&addrspace(1) u64, memory_order) -> u64,

	atomic_load_global_i32_coalesced: fn(&addrspace(1) i32, memory_order) -> i32,
	atomic_load_global_u32_coalesced: fn(&addrspace(1) u32, memory_order) -> u32,
	atomic_load_global_i64_coalesced: fn(&addrspace(1) i64, memory_order) -> i64,
	atomic_load_global_u64_coalesced: fn(&addrspace(1) u64, memory_order) -> u64,

	atomic_store_global_i32: fn(&mut addrspace(1) i32, i32, memory_order) -> (),
	atomic_store_global_u32: fn(&mut addrspace(1) u32, u32, memory_order) -> (),
	atomic_store_global_i64: fn(&mut addrspace(1) i64, i64, memory_order) -> (),
	atomic_store_global_u64: fn(&mut addrspace(1) u64, u64, memory_order) -> (),

	atomic_store_global_i32_coalesced: fn(&mut addrspace(1) i32, i32, memory_order) -> (),
	atomic_store_global_u32_coalesced: fn(&mut addrspace(1) u32, u32, memory_order) -> (),
	atomic_store_global_i64_coalesced: fn(&mut addrspace(1) i64, i64, memory_order) -> (),
	atomic_store_global_u64_coalesced: fn(&mut addrspace(1) u64, u64, memory_order) -> (),

	atomic_add_global_i32: fn(&mut addrspace(1) i32, i32, memory_order) -> i32,
	atomic_add_global_u32: fn(&mut addrspace(1) u32, u32, memory_order) -> u32,
	atomic_add_global_i64: fn(&mut addrspace(1) i64, i64, memory_order) -> i64,
	atomic_add_global_u64: fn(&mut addrspace(1) u64, u64, memory_order) -> u64,

	atomic_sub_global_i32: fn(&mut addrspace(1) i32, i32, memory_order) -> i32,
	atomic_sub_global_u32: fn(&mut addrspace(1) u32, u32, memory_order) -> u32,
	atomic_sub_global_u64: fn(&mut addrspace(1) u64, u64, memory_order) -> u64,

	atomic_and_global_i32: fn(&mut addrspace(1) i32, i32, memory_order) -> i32,
	atomic_and_global_u32: fn(&mut addrspace(1) u32, u32, memory_order) -> u32,
	atomic_and_global_u64: fn(&mut addrspace(1) u64, u64, memory_order) -> u64,

	atomic_or_global_i32: fn(&mut addrspace(1) i32, i32, memory_order) -> i32,
	atomic_or_global_u32: fn(&mut addrspace(1) u32, u32, memory_order) -> u32,
	atomic_or_global_u64: fn(&mut addrspace(1) u64, u64, memory_order) -> u64,

	atomic_xor_global_i32: fn(&mut addrspace(1) i32, i32, memory_order) -> i32,
	atomic_xor_global_u32: fn(&mut addrspace(1) u32, u32, memory_order) -> u32,
	atomic_xor_global_u64: fn(&mut addrspace(1) u64, u64, memory_order) -> u64,

	atomic_exch_global_i32: fn(&mut addrspace(1) i32, i32, memory_order) -> i32,
	atomic_exch_global_u32: fn(&mut addrspace(1) u32, u32, memory_order) -> u32,
	atomic_exch_global_u64: fn(&mut addrspace(1) u64, u64, memory_order) -> u64,

	atomic_min_global_i32: fn(&mut addrspace(1) i32, i32, memory_order) -> i32,
	atomic_min_global_u32: fn(&mut addrspace(1) u32, u32, memory_order) -> u32,
	atomic_min_global_u64: fn(&mut addrspace(1) u64, u64, memory_order) -> u64,

	atomic_max_global_i32: fn(&mut addrspace(1) i32, i32, memory_order) -> i32,
	atomic_max_global_u32: fn(&mut addrspace(1) u32, u32, memory_order) -> u32,
	atomic_max_global_u64: fn(&mut addrspace(1) u64, u64, memory_order) -> u64,

	atomic_cas_global_i32: fn(&mut addrspace(1) i32, i32, i32, memory_order, memory_order) -> (i32, bool),
	atomic_cas_global_u32: fn(&mut addrspace(1) u32, u32, u32, memory_order, memory_order) -> (u32, bool),
	atomic_cas_global_i64: fn(&mut addrspace(1) i64, i64, i64, memory_order, memory_order) -> (i64, bool),
	atomic_cas_global_u64: fn(&mut addrspace(1) u64, u64, u64, memory_order, memory_order) -> (u64, bool),
	atomic_cas_global_i32_weak: fn(&mut addrspace(1) i32, i32, i32, memory_order, memory_order) -> (i32, bool),
	atomic_cas_global_u32_weak: fn(&mut addrspace(1) u32, u32, u32, memory_order, memory_order) -> (u32, bool),
	atomic_cas_global_i64_weak: fn(&mut addrspace(1) i64, i64, i64, memory_order, memory_order) -> (i64, bool),
	atomic_cas_global_u64_weak: fn(&mut addrspace(1) u64, u64, u64, memory_order, memory_order) -> (u64, bool),

	atomic_inc_global_u32: fn(&mut addrspace(1) u32, u32) -> u32,
	atomic_dec_global_u32: fn(&mut addrspace(1) u32, u32) -> u32,

	memory_barrier: fn(memory_order) -> (),

	timestamp: fn() -> i64,
	timestamp32: fn() -> i32,

	// atomic_wait_and_transition_global_u32: fn(&mut addrspace(1) u32, u32, u32, memory_order, &[u8]) -> (),
	wait: fn(fn() -> bool, &[u8]) -> (),
}
