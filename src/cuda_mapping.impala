
static cuda_device = 0;

fn @createAccDevice() -> AccDevice {
	AccDevice {
		launch_1d: @|num_groups, group_size, body| {
			cuda_launch_1d(cuda_device, num_groups, group_size, body)
		},
		alloc: @|size| alloc_cuda(cuda_device, size),
		platform_device: runtime_device(1, cuda_device)
	}
}


fn @cuda_thread(idx: fn () -> u32, body: fn (gpu_thread_context) -> ()) -> () {
	@@body(gpu_thread_context {
		idx: idx,

		atomic_add_global_i32: cuda_atomic_add_global_i32,
		atomic_add_global_u32: cuda_atomic_add_global_u32,
		atomic_add_global_u64: cuda_atomic_add_global_u64,
		atomic_add_global_f32: cuda_atomic_add_global_f32,
		// atomic_add_global_f64: cuda_atomic_add_global_f64,

		atomic_sub_global_i32: cuda_atomic_sub_global_i32,
		atomic_sub_global_u32: cuda_atomic_sub_global_u32,
		atomic_sub_global_u64: cuda_atomic_sub_global_u64,
		atomic_sub_global_f32: cuda_atomic_sub_global_f32,
		// atomic_sub_global_f64: cuda_atomic_sub_global_f64,

		atomic_and_global_i32: cuda_atomic_and_global_i32,
		atomic_and_global_u32: cuda_atomic_and_global_u32,
		atomic_and_global_u64: cuda_atomic_and_global_u64,

		atomic_or_global_i32: cuda_atomic_or_global_i32,
		atomic_or_global_u32: cuda_atomic_or_global_u32,
		atomic_or_global_u64: cuda_atomic_or_global_u64,

		atomic_xor_global_i32: cuda_atomic_xor_global_i32,
		atomic_xor_global_u32: cuda_atomic_xor_global_u32,
		atomic_xor_global_u64: cuda_atomic_xor_global_u64,

		atomic_exch_global_i32: cuda_atomic_exch_global_i32,
		atomic_exch_global_u32: cuda_atomic_exch_global_u32,
		atomic_exch_global_u64: cuda_atomic_exch_global_u64,
		atomic_exch_global_f32: cuda_atomic_exch_global_f32,

		atomic_min_global_i32: cuda_atomic_min_global_i32,
		atomic_min_global_u32: cuda_atomic_min_global_u32,
		atomic_min_global_u64: cuda_atomic_min_global_u64,

		atomic_max_global_i32: cuda_atomic_max_global_i32,
		atomic_max_global_u32: cuda_atomic_max_global_u32,
		atomic_max_global_u64: cuda_atomic_max_global_u64,

		// atomic_cas_global_u16: cuda_atomic_cas_global_u16,
		atomic_cas_global_i32: cuda_atomic_cas_global_i32,
		atomic_cas_global_u32: cuda_atomic_cas_global_u32,
		atomic_cas_global_i64: cuda_atomic_cas_global_u64,

		atomic_inc_global_u32: cuda_atomic_inc_global_u32,
		atomic_dec_global_u32: cuda_atomic_dec_global_u32,

		yield: @|| cuda_nanosleep(0u32)
	});
}

fn @cuda_subwarp(membermask: u32, num_threads: u32, idx: fn () -> u32, body: fn (gpu_wave_context) -> ()) -> () {
	@@body(gpu_wave_context{
		idx: idx,

		membermask: @|| membermask,

		threads: @|body| cuda_thread(cuda_laneid, body),

		num_threads: @|| num_threads,

		barrier: @|| cuda_warp_sync(membermask),
		barrier_all: @|predicate| cuda_warp_sync_all(membermask, predicate),
		barrier_any: @|predicate| cuda_warp_sync_any(membermask, predicate),
		barrier_count: @|predicate| cuda_popc_u32(cuda_warp_sync_vote(membermask, predicate)),
		barrier_vote: @|predicate| cuda_warp_sync_vote(membermask, predicate),

		// activemask: cuda_warp_activemask,

		shfl_i32: @|x:i32, src_lane:i32, width:i32| cuda_warp_shfl_i32(membermask, x, src_lane, width),
		shfl_u32: @|x:u32, src_lane:i32, width:i32| cuda_warp_shfl_u32(membermask, x, src_lane, width),
		// shfl_i64: @|x:i64, src_lane:i32, width:i32| cuda_warp_shfl_i64(membermask, x, src_lane, width),
		// shfl_u64: @|x:u64, src_lane:i32, width:i32| cuda_warp_shfl_u64(membermask, x, src_lane, width),
		shfl_f32: @|x:f32, src_lane:i32, width:i32| cuda_warp_shfl_f32(membermask, x, src_lane, width),
		// shfl_f64: @|x:f64, src_lane:i32, width:i32| cuda_warp_shfl_f64(membermask, x, src_lane, width),

		shfl_up_i32: @|x:i32, delta:u32, width:i32| cuda_warp_shfl_up_i32(membermask, x, delta, width),
		shfl_up_u32: @|x:u32, delta:u32, width:i32| cuda_warp_shfl_up_u32(membermask, x, delta, width),
		// shfl_up_i64: @|x:i64, delta:u32, width:i32| cuda_warp_shfl_up_i64(membermask, x, delta, width),
		// shfl_up_u64: @|x:u64, delta:u32, width:i32| cuda_warp_shfl_up_u64(membermask, x, delta, width),
		shfl_up_f32: @|x:f32, delta:u32, width:i32| cuda_warp_shfl_up_f32(membermask, x, delta, width),
		// shfl_up_f64: @|x:f64, delta:u32, width:i32| cuda_warp_shfl_up_f64(membermask, x, delta, width),

		shfl_down_i32: @|x:i32, delta:u32, width:i32| cuda_warp_shfl_down_i32(membermask, x, delta, width),
		shfl_down_u32: @|x:u32, delta:u32, width:i32| cuda_warp_shfl_down_u32(membermask, x, delta, width),
		// shfl_down_i64: @|x:i64, delta:u32, width:i32| cuda_warp_shfl_down_i64(membermask, x, delta, width),
		// shfl_down_u64: @|x:u64, delta:u32, width:i32| cuda_warp_shfl_down_u64(membermask, x, delta, width),
		shfl_down_f32: @|x:f32, delta:u32, width:i32| cuda_warp_shfl_down_f32(membermask, x, delta, width),
		// shfl_down_f64: @|x:f64, delta:u32, width:i32| cuda_warp_shfl_down_f64(membermask, x, delta, width),

		shfl_xor_i32: @|x:i32, lane_mask:i32, width:i32| cuda_warp_shfl_xor_i32(membermask, x, lane_mask, width),
		shfl_xor_u32: @|x:u32, lane_mask:i32, width:i32| cuda_warp_shfl_xor_u32(membermask, x, lane_mask, width),
		// shfl_xor_i64: @|x:i64, lane_mask:i32, width:i32| cuda_warp_shfl_xor_i64(membermask, x, lane_mask, width),
		// shfl_xor_u64: @|x:u64, lane_mask:i32, width:i32| cuda_warp_shfl_xor_u64(membermask, x, lane_mask, width),
		shfl_xor_f32: @|x:f32, lane_mask:i32, width:i32| cuda_warp_shfl_xor_f32(membermask, x, lane_mask, width),
		// shfl_xor_f64: @|x:f64, lane_mask:i32, width:i32| cuda_warp_shfl_xor_f64(membermask, x, lane_mask, width),

		// match_any_i32: @|x:i32| cuda_warp_match_any_i32(membermask, x),
		// match_any_u32: @|x:u32| cuda_warp_match_any_u32(membermask, x),
		// match_any_i64: @|x:i64| cuda_warp_match_any_i64(membermask, x),
		// match_any_u64: @|x:u64| cuda_warp_match_any_u64(membermask, x),
		// match_any_f32: @|x:f32| cuda_warp_match_any_f32(membermask, x),
		// match_any_f64: @|x:f64| cuda_warp_match_any_f64(membermask, x),

		// match_all_i32: @|x:i32, predicate:&mut i32| cuda_warp_match_all_i32(membermask, x, predicate),
		// match_all_u32: @|x:u32, predicate:&mut i32| cuda_warp_match_all_u32(membermask, x, predicate),
		// match_all_i64: @|x:i64, predicate:&mut i32| cuda_warp_match_all_i64(membermask, x, predicate),
		// match_all_u64: @|x:u64, predicate:&mut i32| cuda_warp_match_all_u64(membermask, x, predicate),
		// match_all_f32: @|x:f32, predicate:&mut i32| cuda_warp_match_all_f32(membermask, x, predicate),
		// match_all_f64: @|x:f64, predicate:&mut i32| cuda_warp_match_all_f64(membermask, x, predicate),

		lanemask: cuda_lanemask,
		lanemask_le: cuda_lanemask_le,
		lanemask_lt: cuda_lanemask_lt,
		lanemask_ge: cuda_lanemask_ge,
		lanemask_gt: cuda_lanemask_gt
	});
}

fn @cuda_block(num_threads: fn () -> u32, idx: fn () -> u32, body: fn (gpu_group_context) -> ()) -> () {
	@@body(gpu_group_context {
		idx: idx,
		waves: @|body| cuda_subwarp(!0u32, 32u32, @|| cuda_threadIdx_x() as u32 / 32u32, body),
		threads: @|body| cuda_thread(@|| cuda_threadIdx_x() as u32, body),
		num_waves: @|| (num_threads() + 31u32) / 32u32,
		num_threads: num_threads,
		barrier: cuda_block_sync,
		barrier_all: cuda_block_sync_all,
		barrier_any: cuda_block_sync_any,
		barrier_count: cuda_block_sync_count
	});
}

fn cuda_launch_1d(device: i32, grid_dim: i32, block_dim: i32, body: fn (gpu_grid_context, gpu_intrinsics) -> ()) -> () {
	// TODO: assert(warp_size == 32)

	let num_threads_per_block = @|| {
		if ?(block_dim as u32) {
			block_dim as u32
		}
		else {
			cuda_blockDim_x() as u32
		}
	};

	let num_warps_per_block = @|| {
		(num_threads_per_block() + 31u32) / 32u32
	};

	let num_blocks = @|| {
		if ?(grid_dim as u32) {
			grid_dim as u32
		}
		else {
			cuda_gridDim_x() as u32
		}
	};

	let num_warps = @|| {
		num_blocks() * num_warps_per_block()
	};

	let num_threads = @|| {
		num_blocks() * num_threads_per_block()
	};

	cuda(device, (grid_dim * block_dim, 1, 1), (block_dim, 1, 1), @|| @@body(gpu_grid_context {
		device: device,
		groups: @|body| cuda_block(num_threads_per_block, @|| cuda_blockIdx_x() as u32, body),
		waves: @|body| cuda_subwarp(!0u32, 32u32, @|| cuda_blockIdx_x() as u32 * num_warps_per_block() + cuda_threadIdx_x() as u32 / 32u32, body),
		threads: @|body| cuda_thread(@|| cuda_blockIdx_x() as u32 * num_threads_per_block() + cuda_threadIdx_x() as u32, body),
		num_groups: num_blocks,
		num_waves: num_warps,
		num_threads: num_threads
	}, cuda_gpu_intrinsics()));
}

extern "device" {
	fn "__float_as_uint" cuda_float_as_uint(f32) -> u32;
	fn "__uint_as_float" cuda_uint_as_float(u32) -> f32;
}

fn @cuda_gpu_intrinsics() -> gpu_intrinsics {
	gpu_intrinsics {
		expf: cuda_expf,
		exp2f: cuda_exp2f,
		logf: cuda_logf,
		log2f: cuda_log2f,
		powf: cuda_powf,
		rsqrtf: cuda_rsqrtf,
		sqrtf: cuda_sqrtf,
		fabsf: cuda_fabsf,
		sinf: cuda_sinf,
		cosf: cuda_cosf,
		tanf: cuda_tanf,
		asinf: cuda_asinf,
		acosf: cuda_acosf,
		atanf: cuda_atanf,
		erff: cuda_erff,
		atan2f: cuda_atan2f,
		fmaxf: cuda_fmaxf,
		fminf: cuda_fminf,
		fmodf: cuda_fmodf,
		floorf: cuda_floorf,
		fmaf: cuda_fmaf,
		madf: cuda_madf,
		isinff: cuda_isinff,
		isnanf: cuda_isnanf,
		isfinitef: cuda_isfinitef,
		copysignf: cuda_copysignf,

		float_as_uint: cuda_float_as_uint,
		uint_as_float : cuda_uint_as_float
	}
}
