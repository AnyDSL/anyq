
fn @min(a: i32, b: i32) -> i32 { if a < b { a } else { b } }
fn @min_i64(a: i64, b: i64) -> i64 { if a < b { a } else { b } }
fn @max(a: i32, b: i32) -> i32 { if a > b { a } else { b } }
fn @max_i64(a: i64, b: i64) -> i64 { if a > b { a } else { b } }
fn @abs(a: i32) -> i32 { if a < 0 { -a } else { a } }


fn @div_up(a: i32, b: i32) -> i32 { (a + b - 1) / b }
fn @div_up_u32(a: u32, b: u32) -> u32 { (a + b - 1) / b }
fn @div_up_i64(a: i64, b: i64) -> i64 { (a + b - 1) / b }

// nearest multiple of num
fn @round_up(num: i32, multiple: i32) -> i32 { div_up(num, multiple) * multiple }
fn @round_up_u32(num: u32, multiple: u32) -> u32 { div_up_u32(num, multiple) * multiple }
fn @round_up_i64(num: i64, multiple: i64) -> i64 { div_up_i64(num, multiple) * multiple }
fn @round_down(num: i32, multiple: i32) -> i32 { (num / multiple) * multiple }
fn @round_down_u32(num: u32, multiple: u32) -> u32 { (num / multiple) * multiple }
fn @round_down_i64(num: i64, multiple: i64) -> i64 { (num / multiple) * multiple }

static mut total_kernel_timing: i64 = 0;
static mut total_cpu_timing: i64 = 0;

fn @benchmark(get_time: fn() -> i64, num_iter: i32, body: fn() -> (), sync: fn() -> ()) -> i64 {
    let times_buf = alloc_cpu(num_iter as i64 * sizeof[i64]());
    let times = bitcast[&mut[i64]](times_buf.data);
    for i in range(0, num_iter) {
        let start = get_time();
        body();
        sync();
        times(i) = get_time() - start;
    }
    sort_i64(num_iter, times);
    print_string("Timing: ");
    print_f64(times(num_iter/2) as f64 / 1000.0);
    print_string(" | ");
    print_f64(times(0) as f64 / 1000.0);
    print_string(" | ");
    print_f64(times(num_iter-1) as f64 / 1000.0);
    print_string(" (median(");
    print_i32(num_iter);
    print_string(") | minimum | maximum) ms\n");
    let median = times(num_iter/2);
    release(times_buf);
    median
}

static iter_acc =  30;
static iter_cpu = 270;
fn @benchmark_acc( body: fn() -> ()) = @|acc: Accelerator| total_kernel_timing += benchmark(get_kernel_time, iter_acc, body, acc.sync);
fn @benchmark_cpu( body: fn() -> ()) = @|| total_cpu_timing += benchmark(get_micro_time, iter_cpu, body, @||{});
fn @benchmark_cuda(body: fn() -> ()) = @|dev: i32, N: i32| total_kernel_timing += benchmark(get_kernel_time, N, body, @|| synchronize_cuda(dev));

fn print_total_timing() -> () {
    print_string("Total timing for cpu / kernel: ");
    print_f64(total_cpu_timing as f64 / 1000.0);
    print_string(" / ");
    print_f64(total_kernel_timing as f64 / 1000.0);
    print_string(" ms\n")
}

fn @(?num) sort_i64(num: i32, arr: &mut[i64]) -> () {
    // insertion sort
    for i in range(1, num) {
        let x = arr(i);
        let mut j = i;
        while j > 0 && arr(j-1) > x {
            arr(j) = arr(j-1);
            j = j - 1;
        }
        arr(j) = x;
    }
}
fn @(?num) sort_f32(num: i32, arr: &mut[f32]) -> () {
    // insertion sort
    for i in range(1, num) {
        let x = arr(i);
        let mut j = i;
        while j > 0 && arr(j-1) > x {
            arr(j) = arr(j-1);
            j = j - 1;
        }
        arr(j) = x;
    }
}

fn print_endl() -> () { print_string("\n"); }
