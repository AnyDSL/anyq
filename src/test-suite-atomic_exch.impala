
fn @setup_input(num_globals: i32, num_locals: i32) -> (fn(i32)->i32,fn(i32)->i32) {
	let global = @|g| { 0 };
	let local  = @|l| { l };
	(global, local)
}

fn @test_body(grid: gpu_grid_context, intrinsics: Intrinsics, read: ReadFn, write: WriteFn, global: GlobalFn) -> () {

	with thread in grid.threads() {
		let tidx = thread.idx(0) as i32;

		let mydata = read(tidx);
		thread.atomic_add_global_i32(global(0), mydata);

		let mut newdata = mydata;
		//if mydata & 1 == 0 {
			newdata = thread.atomic_exch_global_i32(global(2), mydata);
		//}

		thread.atomic_add_global_i32(global(1), newdata);
	}

}

fn @expected_result(global: fn(i32)->i32, local: fn(i32)->i32) -> (fn(i32)->i32, fn(i32)->i32) {

	let last_value = global(2);
	//print_string("last_value: "); print_i32(last_value); print_string("\n");

	let values = |l| l;
	let result = |g| match g { 0 => 130816, 1 => 130816 - last_value, 2 => last_value, _ => 0x0 };

	(result, values)
}
