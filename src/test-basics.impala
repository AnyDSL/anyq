

fn main() -> i32 {
	let group_size = 256;
	let num_groups = 42;

	let test = createBaseTest(0);

	with device, device_memory, device_failed_flag in test.run_test() {
		with grid, intrinsics in device.launch_1d(num_groups, group_size) {
			with thread in grid.threads() {
				thread.atomic_add_global_u32(device_failed_flag, thread.idx(0) as u32);
			}
		}

		true
	}

	with device, device_memory, device_failed_flag in test.run_test() {
		with grid, intrinsics in device.launch_1d(num_groups, group_size) {
			with group in grid.groups() {
				with wave in group.waves() {
					with thread in wave.threads() {
						thread.atomic_sub_global_u32(device_failed_flag, ((group.idx(0) * group.num_waves() + wave.idx()) * wave.num_threads() + thread.idx(0)) as u32);
					}
				}
			}
		}

		true
	}

	with device, device_memory, device_failed_flag in test.run_test() {
		with grid, intrinsics in device.launch_1d(num_groups, group_size) {
			with group in grid.groups() {
				with thread in group.threads() {
					thread.atomic_add_global_u32(device_failed_flag, (group.idx(0) * group.num_threads(0) + thread.idx(0)) as u32);
				}
			}
		}

		true
	}

	with device, device_memory, device_failed_flag in test.run_test() {
		with grid, intrinsics in device.launch_1d(num_groups, group_size) {
			with wave in grid.waves() {
				with thread in wave.threads() {
					thread.atomic_sub_global_u32(device_failed_flag, (wave.idx() * wave.num_threads() + thread.idx(0)) as u32);
				}
			}
		}

		true
	}

	test.finish()
}
