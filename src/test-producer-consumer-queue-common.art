struct QueueTest[T] {
	run_test: fn(fn(ProducerConsumerQueue[T], &mut addrspace(1) [i8], &mut addrspace(1) u32) -> bool) -> fn(i32) -> (),
	finish: fn() -> i32
}

fn createQueueTest[T](device: AccDevice, element_type: QueueElementType[T], additional_mem: i64) -> QueueTest[T] {
	let test = createBaseTest(device, additional_mem);

	QueueTest[T] {
		run_test = @|body|@|queue_size| {
			for device_memory, device_failed_flag in test.run_test() {
				let queue = createConcurrentProducerConsumerQueue[T](device, element_type, queue_size);

				let block_dim = 256;
				let num_blocks = (queue_size + block_dim - 1) / block_dim;

				for grid in device.launch_1d(num_blocks, block_dim) {
					queue.reset(grid);
				}

				let cpu_result = body(queue, device_memory, device_failed_flag);

				for grid in device.launch_1d(num_blocks, block_dim) {
					queue.validate(device_failed_flag, grid);
				}

				device.synchronize();
				queue.release();

				cpu_result
			}
		},

		finish = @|| {
			test.finish()
		}
	}
}


struct QueueTestElement[T] {
	element_type: QueueElementType[T],
	generateElement: fn(i32) -> T,
	unpackRefValue: fn (T) -> i32
}


fn @indexTestElement() = QueueTestElement[u32] {
	element_type = indexQueueElementType(),
	generateElement = @|ref_value:i32| ref_value as u32,
	unpackRefValue = @|el:u32| el as i32
};


fn @genericTestElement[T](generateElement: fn(i32) -> T, unpackRefValue: fn (T) -> i32) = QueueTestElement[T] {
	element_type = genericQueueElementType[T](),
	generateElement = generateElement,
	unpackRefValue = unpackRefValue
};

type GenericElementSimple = i64;

fn genericTestElementSimple() = genericTestElement[GenericElementSimple](
	@|ref_value:i32| -> GenericElementSimple { ref_value as i64 },
	@|el:GenericElementSimple| el as i32
);

struct GenericElementStruct {
	payload: bool,
	ref_value: i32
}

fn genericTestElementStruct() = genericTestElement[GenericElementStruct] (
	@|ref_value:i32| GenericElementStruct { payload = ref_value % 3 == 0, ref_value = ref_value },
	@|el:GenericElementStruct| el.ref_value
);

struct GenericElementComplexStruct {
	payload: [u32 * 7],
	ref_value: i32
}

fn genericTestElementComplexStruct() = genericTestElement[GenericElementComplexStruct] (
	@|ref_value:i32| GenericElementComplexStruct { payload = [0; 7], ref_value = ref_value },
	@|el:GenericElementComplexStruct| el.ref_value
);
