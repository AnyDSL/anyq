

fn bwd_comparison_benchmark(device_id: i32, block_size: i32, attempts_per_thread: i32, queue_size: i32, queue_name: &[u8], create_queue: fn(AccDevice, i32) -> ProducerConsumerQueue[u32]) {
	print_string("queue;queue_size;block_size;attempts_per_thread\n");
	print_string(queue_name); print_char(';');
	print_i32(queue_size); print_char(';');
	print_i32(block_size); print_char(';');
	print_i32(attempts_per_thread); print_char('\n'); print_char('\n');

	let device = createAccDevice(device_id);

	let queue = create_queue(device, queue_size);

	// TODO: release resources


	QueueBenchmark {
		reset = @|| {
			for grid in device.launch_1d(1, 1) {
				queue.reset(grid);
			}
		},

		run = @|num_threads: i32, _i: i32| {
			for grid in device.launch_1d(div_up(num_threads, block_size), block_size) {
				for wave in grid.waves() {
					for thread in wave.threads() {
						let thread_id = wave.idx() * wave.num_threads() + thread.idx(0);

						if thread_id < num_threads as u32 {
							for _ in range(0, attempts_per_thread) {
								for queue.push(thread) { 42 };

								wave.barrier();

								for _value in queue.pop(thread) {};

								wave.barrier();
							}
						}
					}
				}
			}
		},

		read_stats = @|| {
			init_benchmark_stats()
		}
	}
}
