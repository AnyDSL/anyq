
#[import(cc = "device")] fn magic_p_id(u32) -> u32;  // HACK to force evaluation of expression on the host


fn @producer_consumer_queue_concurrent_push_pop_benchmark(device: AccDevice, block_size: i32, attempts_per_thread: i32, p_enq: f32, p_deq: f32, workload_size: i32, its: bool) {
	let rand_mask = @|p: f32| (((-1 as u32) as f64 * p as f64) as u32);
	let c_enq = magic_p_id(rand_mask(p_enq));
	let c_deq = magic_p_id(rand_mask(p_deq));
	let c_enqdeq = magic_p_id(rand_mask(0.5));

	QueueBenchmark {
		enum_param_names = @|enum_param| {
			enum_param("block_size"); enum_param("attempts_per_thread"); enum_param("p_enq"); enum_param("p_deq"); enum_param("workload_size");
		},

		enum_param_values = @|v| {
			v.enum_i32(block_size); v.enum_i32(attempts_per_thread); v.enum_f32(p_enq); v.enum_f32(p_deq); v.enum_i32(workload_size);
		},

		reset = @|_| {},

		run = @|queue_instrumentation, num_threads, i| {
			for grid in device.launch_1d(div_up(num_threads, block_size), block_size) {
				for wave in grid.waves() {
					for thread in wave.threads() {
						let thread_id = wave.idx() * wave.num_threads() + thread.idx(0);

						if thread_id < num_threads as u32 {
							for q in queue_instrumentation.record(thread) {
								let mut rand_state = rng::xorseed32(thread_id + i as u32 * num_threads as u32);

								let sample = @|c: u32| -> bool {
									rand_state = rng::xorshift32(rand_state);
									rand_state < c
								};

								let mut next_value = rand_state;

								let simulate_workload = @|| {
									for _ in range(0, workload_size) {
										next_value = rng::xorshift32(next_value);
									}

									next_value
								};

								let enqueue = @|| {
									if sample(c_enq) {
										next_value = simulate_workload();

										for q.push(thread) {
											next_value
										};
									}
								};

								let dequeue = @|| {
									if sample(c_deq) {
										if for value in q.pop(thread) {
											next_value = value;
										} > 0 {
											simulate_workload();
										}
									}
								};

								for _ in range(0, attempts_per_thread) {
									if its {
										if sample(c_enqdeq) {
											enqueue();
											dequeue();
										}
										else {
											dequeue();
											enqueue();
										}
									}
									else {
										if wave.barrier_count(sample(c_enqdeq)) <= wave.num_threads() as i32 / 2 {
											enqueue();
											wave.barrier();
											dequeue();
										}
										else {
											dequeue();
											wave.barrier();
											enqueue();
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
