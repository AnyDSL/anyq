
fn @upsweep_exponential(body: fn(i32) -> ()) {
	fn @(?min & ?max & ?exp) loop(min: i32, max: i32, exp: i32) -> () {
		if min <= max {
			@body(min);
			loop(min * exp, max, exp);
		}
	}
	loop
}


struct QueueBenchmark {
	enum_param_names: fn(fn(&[u8]) -> ()) -> (),
	enum_param_values: fn(fn(i32) -> (), fn(f32) -> ()) -> (),
	reset: fn(gpu_grid_context) -> (),
	run: fn(QueueInstrumentationScope, i32, i32) -> ()
}

fn @run_queue_benchmark(device: AccDevice, benchmark: QueueBenchmark, queue_name: &[u8], create_queue: fn(AccDevice, i32) -> ProducerConsumerQueue[u32], queue_size: i32, num_threads_min: i32, num_threads_max: i32, create_queue_instrumentation: fn(AccDevice) -> QueueInstrumentation) -> i32 {
	let queue = create_queue(device, queue_size);

	let instrumentation = create_instrumentation(device);
	let queue_instrumentation = create_queue_instrumentation(device);

	print_string("queue_type;queue_size");
	benchmark.enum_param_names(@|name| { print_char(';'); print_string(name); });
	print_char('\n');
	print_string(queue_name); print_char(';'); print_i32(queue_size);
	benchmark.enum_param_values(@|v| { print_char(';'); print_i32(v); }, @|v| { print_char(';'); print_f32(v); });
	print_string("\n\nplatform;device_name;fingerprint\n");
	print_string(device.platform_name); print_char(';');
	print_string(runtime_device_name(device.platform_device)); print_char(';');
	print_string(FINGERPRINT());

	print_string("\n\nnum_threads;t/ms");
	queue_instrumentation.enum_result_names(@|name| { print_char(';'); print_string(name); });
	print_char('\n');

	let N = 10;

	for num_threads in upsweep_exponential(num_threads_min, num_threads_max, 2) {
		for i in range(0, N) {
			print_i32(num_threads); print_char(';');

			// TODO: better launch config (launch based on occupancy?)
			for grid in device.launch_1d(1, 512) {
				queue.reset(grid);
				queue_instrumentation.reset(grid);
				benchmark.reset(grid);
			}

			device.synchronize();

			let t = for instrumentation.time() {
				for qis in queue_instrumentation.record(queue) {
					benchmark.run(qis, num_threads, i);
				}
			};

			device.synchronize();

			print_f32(t);

			queue_instrumentation.results().enum_values(@|v| { print_char(';'); print_i32(v); }, @|v| { print_char(';'); print_i64(v); });
			print_char('\n');
			print_flush();
		}
	}

	0
}
